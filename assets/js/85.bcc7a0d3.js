(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{251:function(a,t,e){"use strict";e.r(t);var v=e(1),r=Object(v.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"同步异步"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#同步异步","aria-hidden":"true"}},[a._v("#")]),a._v(" 同步异步")]),e("p",[a._v("JavaScript语言的一大特点就是"),e("code",[a._v("单线程")]),a._v("，也就是说，同一个时间只能做一件事。那么，为什么JavaScript不能有多个线程呢？这样能提高效率啊。")]),e("p",[e("code",[a._v("JavaScript的单线程，与它的用途有关")]),a._v("。作为浏览器脚本语言，"),e("code",[a._v("JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题")]),a._v("。比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？")]),e("p",[a._v("所以，为了避免复杂性，从一诞生，JavaScript就是单线程，这已经成了这门语言的核心特征，将来也不会改变。")]),e("p",[a._v("为了利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。")]),e("p",[a._v("单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。于是就有一个概念，任务队列。")]),e("p",[a._v("如果排队是因为计算量大，CPU忙不过来，倒也算了，但是很多时候CPU是闲着的，因为IO设备（输入输出设备）很慢（比如Ajax操作从网络读取数据），不得不等着结果出来，再往下执行。")]),e("p",[a._v("JavaScript语言的设计者意识到，这时主线程完全可以不管IO设备，挂起处于等待中的任务，先运行排在后面的任务。等到IO设备返回了结果，再回过头，把挂起的任务继续执行下去。")]),e("p",[a._v('于是，所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入主线程、而进入"任务队列"（task queue）的任务，只有"任务队列"通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。')]),e("p",[a._v("具体来说，异步执行的运行机制如下---"),e("code",[a._v("执行栈 && 任务队列")]),a._v("（同步执行也是如此，因为它可以被视为没有异步任务的异步执行。）")]),e("ol",[e("li",[e("p",[a._v("所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。")])]),e("li",[e("p",[a._v('主线程之外，还存在一个"任务队列"（task queue）。只要异步任务有了运行结果，就在"任务队列"之中放置一个事件。')])]),e("li",[e("p",[a._v('一旦"执行栈"中的所有同步任务执行完毕，系统就会读取"任务队列"，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。')])]),e("li",[e("p",[a._v("主线程不断重复上面的第三步。")])])]),e("h2",{attrs:{id:"任务队列"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#任务队列","aria-hidden":"true"}},[a._v("#")]),a._v(" 任务队列")]),e("p",[a._v('"任务队列"是一个事件的队列（也可以理解成消息的队列），IO设备完成一项任务，就在"任务队列"中添加一个事件，表示相关的异步任务可以进入"执行栈"了。主线程读取"任务队列"，就是读取里面有哪些事件。')]),e("p",[a._v('"任务队列"中的事件，除了IO设备的事件以外，还包括一些用户产生的事件（比如鼠标点击、页面滚动等等）。只要指定过回调函数，这些事件发生时就会进入"任务队列"，等待主线程读取。')]),e("p",[a._v('所谓"回调函数"（callback），就是那些会被主线程挂起来的代码。异步任务必须指定回调函数，当主线程开始执行异步任务，就是执行对应的回调函数。')]),e("p",[a._v('"任务队列"是一个先进先出的数据结构，排在前面的事件，优先被主线程读取。主线程的读取过程基本上是自动的，只要执行栈一清空，"任务队列"上第一位的事件就自动进入主线程。但是，由于存在后文提到的"定时器"功能，主线程首先要检查一下执行时间，某些事件只有到了规定的时间，才能返回主线程。')])])}],!1,null,null,null);t.default=r.exports}}]);