(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{236:function(t,n,e){"use strict";e.r(n);var a=e(1),s=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("div",{staticClass:"content"},[e("h2",{attrs:{id:"在线手册"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在线手册","aria-hidden":"true"}},[t._v("#")]),t._v(" 在线手册")]),e("p",[e("a",{attrs:{href:"http://es6.ruanyifeng.com/#docs/promise",target:"_blank",rel:"noopener noreferrer"}},[t._v("es6在线手册")])]),e("h2",{attrs:{id:"默认参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#默认参数","aria-hidden":"true"}},[t._v("#")]),t._v(" 默认参数")]),e("p",[t._v("在 es6 之前，JavaScript 不能像 PHP 那样支持默认参数，因此需要自己手动定义:")]),e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v("  "),e("span",{attrs:{class:"token function"}},[t._v("takeDiscount")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("price"),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" discount"),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    discount  "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" discount "),e("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),e("span",{attrs:{class:"token number"}},[t._v("0.9")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" price "),e("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" discount"),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{attrs:{class:"token function"}},[t._v("takeDiscount")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token number"}},[t._v("100")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),e("p",[t._v("es6 则允许定义默认参数")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function takeDiscount(price, discount = 0.9){\n    return price * discount;\n}\ntakeDiscount(100);\n")])]),e("p",[t._v("甚至可以以函数形式传递参数:")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function getDiscount(){\n    return 0.9;\n}\n\nfunction takeDiscount(price, discount = getDiscount()){\n    return price * discount;\n}\ntakeDiscount(100);\n")])]),e("h2",{attrs:{id:"rest-参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rest-参数","aria-hidden":"true"}},[t._v("#")]),t._v(" rest 参数")]),e("p",[t._v("在 JavaScript 中，函数参数实际上以数组的方式进行传递，参数会被保存在 arguments 数组中")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function sum() {\n    let total = 0;\n    for (let i = 0; i < arguments.length; i++) {\n        total = total + arguments[i];\n    }\n    return total;\n}\nsum(1, 2, 3, 4, 6);\n")])]),e("p",[t._v("不过 arguments 不单单包括参数，也包括了其他东西，因此没法直接用数组函数来操作 arguments。\n"),e("code",[t._v("es6")]),t._v("则提供了 rest 参数来访问多余变量，上例等价于:")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function sum(...num) {\n    let total = 0;\n    for (let i = 0; i < num.length; i++) {\n        total = total + num[i];\n    }\n    return total;\n}\nsum(1, 2, 3, 4, 6);\n")])]),e("p",[t._v("可以以变量形式进行传递:")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function sum(...num) {\n    let total = 0;\n    for (let i = 0; i < num.length; i++) {\n        total = total + num[i];\n    }\n    return total;\n}\nlet nums = [1, 2, 3, 4, 6];\nsum(...nums);\n")])]),e("p",[t._v("... 还可以与其他参数结合使用，只需要将其他参数放在前面即可:")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function sum(total = 0, ...num) {\n    return total + num.reduce( (preval, curval) => {\n        return preval + curval;\n    });\n}\n\nlet nums = [1,2,3,4];\nsum(100, ...nums);\n")])]),e("h2",{attrs:{id:"解构赋值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解构赋值","aria-hidden":"true"}},[t._v("#")]),t._v(" 解构赋值")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('let person = {\n    firstname : "steve",\n    lastname : "curry",\n    age : 29,\n    sex : "man"\n};\n\nlet {firstname, lastname} = person;\nconsole.log(firstname, lastname);\n\n// 等价于\n// let firstname = person.firstname;\n// let lastname = person.lastname;\n')])]),e("p",[t._v("可以将其用于函数传参中：")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function greet({firstname, lastname}) {\n    console.log(`hello,${firstname}.${lastname}!`);\n};\ngreet({\n    firstname: 'steve',\n    lastname: 'curry'\n});\n")])]),e("h2",{attrs:{id:"类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类","aria-hidden":"true"}},[t._v("#")]),t._v(" 类")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('class User {\n    // 实例化时，调用 constructor 方法，默认返回 this\n    constructor(username, email) {\n        this.username = username;\n        this.email = email;\n    }\n\n    // 类的所有方法会自动绑定到原型对象上，包括 constructor\n    changeEmail(newEmail) {\n        this.email = newEmail;\n    }\n}\n\n// 使用\nlet user = new User("zen", "ihuangmx@qq.com")\nuser.changeEmail("change@qq.com");\nconsole.log(user.email); //=> "change@qq.com"\n')])]),e("p",[t._v("类中可以定义静态方法，也可以使用 get 与 set 进行访问控制：")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('class User {\n    constructor(username, email) {\n        this.username = username;\n        this.email = email;\n    }\n\n    changeEmail(newEmail) {\n        this.email = newEmail;\n    }\n\n    static register(...args) {\n        return new User(...args);\n    }\n\n    // 等价\n    // static register(username, email) {\n    //     return new User(username, email);\n    // }\n\n    get info() {\n        return this.username + " " + this.email;\n    }\n\n    //  首字符大写\n    set name(name) {\n        this.username = name.slice(0,1).toUpperCase().concat(name.slice(1));\n    }\n}\n')])]),e("h2",{attrs:{id:"object"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#object","aria-hidden":"true"}},[t._v("#")]),t._v(" Object")]),e("h2",{attrs:{id:"对象的扩展运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对象的扩展运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" 对象的扩展运算符")]),e("ol",[e("li",[t._v("解构赋值")])]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("let { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };\nx // 1\ny // 2\nz // { a: 3, b: 4 }\n")])]),e("ol",{attrs:{start:"2"}},[e("li",[t._v("扩展运算符")])]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("let z = { a: 3, b: 4 };\nlet n = { ...z };\nn // { a: 3, b: 4 }\n")])]),e("h2",{attrs:{id:"读取对象内部属性的安全写法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#读取对象内部属性的安全写法","aria-hidden":"true"}},[t._v("#")]),t._v(" 读取对象内部属性的安全写法")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const firstName = (message\n  && message.body\n  && message.body.user\n  && message.body.user.firstName) || 'default';\n")])]),e("h1",{attrs:{id:"qa"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#qa","aria-hidden":"true"}},[t._v("#")]),t._v(" QA")]),e("ol",[e("li",[t._v("为什么 export default const 无效？")])]),e("p",[t._v("因为export default命令其实只是输出一个叫做default的变量，所以它后面不能跟变量申明语句。")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 正确\nexport var a = 1;\n// 正确\nvar a = 1;\nexport default a;\n\n// 错误\nexport default var a = 1;\n")])]),e("p",[t._v("上面代码中，export default a 的含义是将变量a的值赋给变量default,所以，最后一种写法报错。")])])}],!1,null,null,null);n.default=s.exports}}]);