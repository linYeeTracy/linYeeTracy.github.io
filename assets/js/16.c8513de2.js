(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{269:function(t,a,e){"use strict";e.r(a);var s=e(1),r=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("div",{staticClass:"content"},[e("blockquote",[e("p",[t._v("采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。")])]),e("p",[t._v("我的直观理解:")]),e("p",[t._v("vuex类似于维护了一个全局的 Map对象。你可以往里存放 key-value。然后所有的state数据操作都方法化，保证操作的可追踪和数据的干净。")]),e("h1",{attrs:{id:"应用场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#应用场景","aria-hidden":"true"}},[t._v("#")]),t._v(" 应用场景")]),e("p",[t._v("区别于localStorage，一刷新页面，state存放的数据会丢失。因为它只是在当前页面初始化生成的一个实例，你一刷新页面所有数据重新生成，数据就没了。")]),e("p",[t._v("so,vuex只能用于单个页面中不同组件（例如兄弟组件）的数据流通:")]),e("ul",[e("li",[t._v("不同组件信息的同步展示")]),e("li",[t._v("子组件想改变父组件的情况下")])]),e("h1",{attrs:{id:"基本概念抽象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本概念抽象","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本概念抽象")]),e("p",[t._v("state")]),e("blockquote",[e("p",[t._v("vuex的单一状态树，一个对象就包含了应用层的所有状态。\n"),e("img",{attrs:{src:"vuex/state.png",alt:"state"}})])]),e("p",[t._v("getters")]),e("p",[t._v("getters属性主要是对于state中数据的一种过滤，属于一种加强属性，把"),e("code",[t._v("一些简单或通用的操作可以抽取到getters上来，方便在应用中引用")]),t._v("。比如你在做一个todolist，对于已完成的，你可以写一个doneTodoList的属性，在外面直接调用。其实他就是对于action和mutations的一个简化。不然你写一个doneTodoList功能，你还得写对应的action和mutation，太费劲。")]),e("p",[e("img",{attrs:{src:"vuex/getter.png",alt:"getter"}})]),e("p",[t._v("mutations")]),e("p",[t._v("更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。\nmutation中写有修改数据的逻辑。\n另外mutation里只能执行同步操作。")]),e("p",[e("img",{attrs:{src:"vuex/mutation.png",alt:"mutation"}})]),e("p",[t._v("actions")]),e("p",[t._v("对于store中数据的修改操作动作在action中提交。\n其实action和mutation类似，但是action提交是mutation，并不直接修改数据，而是触发mutation修改数据。")]),e("p",[e("img",{attrs:{src:"vuex/action.png",alt:"action"}})]),e("p",[t._v("module")]),e("p",[t._v("随着后面的业务逻辑的增多，把vuex分模块的开发会使得代码更加简洁清晰明了，比如登录一个模块，产品一个模块.\n下图的 todo目录就是一个module，下面的 actions.js,mutations.js就和外面的一样。")]),e("p",[e("img",{attrs:{src:"vuex/module.png",alt:"module"}})]),e("h1",{attrs:{id:"代码实践"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码实践","aria-hidden":"true"}},[t._v("#")]),t._v(" 代码实践")]),e("h3",{attrs:{id:"目录结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#目录结构","aria-hidden":"true"}},[t._v("#")]),t._v(" 目录结构")]),e("p",[e("img",{attrs:{src:"vuex/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png",alt:"目录结构"}})]),e("blockquote",[e("p",[t._v("store.js 将vuex维护的所有数据导出供外部使用。\nmutation_type.js 维护操作类型的常量字段")])]),e("h3",{attrs:{id:"main-js加载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#main-js加载","aria-hidden":"true"}},[t._v("#")]),t._v(" main.js加载")]),e("p",[e("img",{attrs:{src:"vuex/main.png",alt:"main"}})]),e("h3",{attrs:{id:"使用规则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用规则","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用规则")]),e("ol",[e("li",[t._v("读取store里的值")])]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("this.$store.state.字段名\n如果有moudle的话，假设叫 login,那么取值又要变了，加上module名\nthis.$store.state.login.mobile\n")])]),e("ol",{attrs:{start:"2"}},[e("li",[t._v("发起操作请求")])]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("this.$store.dispatch('action中的方法名' , '参数');\n")])]),e("ol",{attrs:{start:"3"}},[e("li",[t._v("getters的用法")])]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("this.$store.getters.filterDoned\n")])]),e("h1",{attrs:{id:"todo-list-demo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#todo-list-demo","aria-hidden":"true"}},[t._v("#")]),t._v(" todo list demo")]),e("p",[e("a",{attrs:{href:"https://github.com/XuXiaoGH/vuex-test",target:"_blank",rel:"noopener noreferrer"}},[t._v("todo-list")])])])}],!1,null,null,null);a.default=r.exports}}]);