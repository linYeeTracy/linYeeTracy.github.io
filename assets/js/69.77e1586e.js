(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{228:function(t,e,r){"use strict";r.r(e);var a=r(1),o=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"content"},[r("h1",{attrs:{id:"git-命令行"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git-命令行","aria-hidden":"true"}},[t._v("#")]),t._v(" git 命令行")]),r("p",[r("img",{attrs:{src:"https://cloud.githubusercontent.com/assets/17583395/23828785/ddc1ef96-0717-11e7-8d47-26c0556dbdb5.jpeg",alt:"git"}})]),r("h2",{attrs:{id:"目录"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#目录","aria-hidden":"true"}},[t._v("#")]),t._v(" 目录")]),r("ol",[r("li",[r("p",[r("a",{attrs:{href:"#%E6%9C%AC%E5%9C%B0%E5%BA%93"}},[t._v("本地库")])])]),r("li",[r("p",[r("a",{attrs:{href:"#%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93"}},[t._v("远程仓库")])])]),r("li",[r("p",[r("a",{attrs:{href:"#%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86"}},[t._v("分支管理")])]),r("p",[t._v("3.1 "),r("a",{attrs:{href:"#%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF"}},[t._v("创建与合并分支")])]),r("p",[t._v("3.2 "),r("a",{attrs:{href:"#%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81"}},[t._v("解决冲突")])])]),r("li",[r("p",[r("a",{attrs:{href:"#%E6%A0%87%E7%AD%BE%E7%AE%A1%E7%90%86"}},[t._v("标签管理")])]),r("p",[t._v("4.1 "),r("a",{attrs:{href:"#%E5%88%9B%E5%BB%BA%E6%A0%87%E7%AD%BE"}},[t._v("创建标签")])]),r("p",[t._v("4.2 "),r("a",{attrs:{href:"#%E6%93%8D%E4%BD%9C%E6%A0%87%E7%AD%BE"}},[t._v("操作标签")])])])]),r("br"),r("h2",{attrs:{id:"本地库"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#本地库","aria-hidden":"true"}},[t._v("#")]),t._v(" 本地库")]),r("blockquote",[r("p",[t._v("初始化一个 Git 版本库")])]),r("pre",[r("code",[t._v("git init\n")])]),r("blockquote",[r("p",[t._v("查看 Git 版本库状态")])]),r("pre",[r("code",[t._v("git status\n")])]),r("blockquote",[r("p",[t._v("查看被改动文件的详细信息")])]),r("pre",[r("code",[t._v("git diff <fileName>\n")])]),r("blockquote",[r("p",[t._v("将文件加入缓存区")])]),r("pre",[r("code",[t._v("git add <fileName>\n")])]),r("blockquote",[r("p",[t._v("提交到版本库")])]),r("pre",[r("code",[t._v("git commit -m 'message'\n")])]),r("blockquote",[r("p",[t._v("查看版本库操作日志")])]),r("pre",[r("code",[t._v("git log\n")])]),r("blockquote",[r("p",[t._v("格式显示版本库操作日志")])]),r("pre",[r("code",[t._v("git log --pretty=oneline\n")])]),r("blockquote",[r("p",[t._v("回滚（重置）版本库")])]),r("pre",[r("code",[t._v("git reset --hard <版本号>\n")])]),r("blockquote",[r("p",[r("strong",[t._v("工作区（Woking Directory）")])])]),r("pre",[r("code",[t._v("就是你在电脑里能看到的目录，或者说你当前 Git 版本库所在的文件夹\n")])]),r("blockquote",[r("p",[r("strong",[t._v("版本库（Repository）")])])]),r("p",[t._v("工作区有一个隐藏的目录 .git,这个不算工作区,而是 Git 的版本库\nGit的版本库里存了很多东西，其中最重要的就是称为 "),r("code",[t._v("stage")]),t._v("(或者叫 "),r("code",[t._v("index")]),t._v(") 的暂存区，\n还有 Git 为我们自动创建的第一个分支 "),r("code",[t._v("master")]),t._v("，以及指向 "),r("code",[t._v("master")]),t._v(" 的一个指针叫做 "),r("code",[t._v("HEAD")]),t._v("。")]),r("blockquote",[r("p",[t._v("撤销工作区修改")])]),r("pre",[r("code",[t._v("git checkout -- <fileName>\n")])]),r("blockquote",[r("p",[t._v("撤销暂存区修改")])]),r("pre",[r("code",[t._v("git reset HEAD <fileName>\n")])]),r("blockquote",[r("p",[t._v("删除文件")])]),r("pre",[r("code",[t._v("git rm <fileName>\n")])]),r("br"),r("h2",{attrs:{id:"远程仓库"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#远程仓库","aria-hidden":"true"}},[t._v("#")]),t._v(" 远程仓库")]),r("blockquote",[r("p",[t._v("关联远程仓库")])]),r("pre",[r("code",[t._v("git remote add origin git@github.com:<github地址>/<仓库名称>.git\n")])]),r("blockquote",[r("p",[t._v("将内容推送的远程库")])]),r("pre",[r("code",[t._v("git push -u origin <分支>\ngit push origin <分支>\n")])]),r("p",[t._v("第一次推送 "),r("code",[t._v("master")]),t._v(" 分支时，加上了 "),r("code",[t._v("-u")]),t._v(" 参数，Git 不但会把本地的 "),r("code",[t._v("master")]),t._v(" 分支内容推送到远程新的 "),r("code",[t._v("master")]),t._v(" 分支，\n还会把本地的 "),r("code",[t._v("master")]),t._v(" 分支和远程的 "),r("code",[t._v("master")]),t._v(" 分支关联起来，在以后的推送或者拉取时就可以简化命令。")]),r("blockquote",[r("p",[t._v("克隆远程库")])]),r("pre",[r("code",[t._v("git clone git@github.com:<github地址>/<仓库名称>.git\n")])]),r("br"),r("h2",{attrs:{id:"分支管理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分支管理","aria-hidden":"true"}},[t._v("#")]),t._v(" 分支管理")]),r("h3",{attrs:{id:"创建与合并分支"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#创建与合并分支","aria-hidden":"true"}},[t._v("#")]),t._v(" 创建与合并分支")]),r("blockquote",[r("p",[t._v("创建并切换分支")])]),r("pre",[r("code",[t._v("git checkout -b <branchName>\n")])]),r("blockquote",[r("p",[t._v("查看分支")])]),r("pre",[r("code",[t._v("git branch\n")])]),r("blockquote",[r("p",[t._v("切换分支")])]),r("pre",[r("code",[t._v("git checkout <branchName>\n")])]),r("blockquote",[r("p",[t._v("合并分支")])]),r("pre",[r("code",[t._v("git merge <branchName>\n")])]),r("blockquote",[r("p",[t._v("删除分支")])]),r("pre",[r("code",[t._v("git branch -d <branchName>\n")])]),r("h3",{attrs:{id:"解决冲突"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#解决冲突","aria-hidden":"true"}},[t._v("#")]),t._v(" 解决冲突")]),r("blockquote",[r("p",[t._v("查看分支合并情况")])]),r("pre",[r("code",[t._v("git log --graph --pertty=oneline --abbrev-commit\n")])]),r("blockquote",[r("p",[t._v("储藏")])]),r("pre",[r("code",[t._v("git stash\n")])]),r("blockquote",[r("p",[t._v("查看储藏列表")])]),r("pre",[r("code",[t._v("git stash list\n")])]),r("blockquote",[r("p",[t._v("应用储藏")])]),r("pre",[r("code",[t._v("git stash apply <stash@{xx}>\n")])]),r("blockquote",[r("p",[t._v("删除储藏")])]),r("pre",[r("code",[t._v("git stash drop <index | stash>\n")])]),r("blockquote",[r("p",[t._v("应用并删除储藏")])]),r("pre",[r("code",[t._v("git stash pop <index | stash>\n")])]),r("blockquote",[r("p",[t._v("显示储藏信息")])]),r("pre",[r("code",[t._v("git stash show <index | stash>\n")])]),r("blockquote",[r("p",[t._v("查看远程库信息")])]),r("pre",[r("code",[t._v("git remote\n")])]),r("blockquote",[r("p",[t._v("查看远程库详细信息")])]),r("pre",[r("code",[t._v("git remote -v\n")])]),r("blockquote",[r("p",[t._v("推送分支")])]),r("pre",[r("code",[t._v("git push origin <branchName>\n")])]),r("br"),r("h2",{attrs:{id:"标签管理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#标签管理","aria-hidden":"true"}},[t._v("#")]),t._v(" 标签管理")]),r("h3",{attrs:{id:"创建标签"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#创建标签","aria-hidden":"true"}},[t._v("#")]),t._v(" 创建标签")]),r("blockquote",[r("p",[t._v("创建标签")])]),r("pre",[r("code",[t._v("git tag <name>\n")])]),r("blockquote",[r("p",[t._v("查看标签")])]),r("pre",[r("code",[t._v("git tag\n")])]),r("blockquote",[r("p",[t._v("为commit id 添加标签")])]),r("pre",[r("code",[t._v("git tag <commit id>\n")])]),r("blockquote",[r("p",[t._v("查看标签信息")])]),r("pre",[r("code",[t._v("git show <tagName>\n")])]),r("blockquote",[r("p",[t._v("创建带有说明的标签")])]),r("pre",[r("code",[t._v("git tag -a <tagName> -m 'your message'\n")])]),r("h3",{attrs:{id:"操作标签"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#操作标签","aria-hidden":"true"}},[t._v("#")]),t._v(" 操作标签")]),r("blockquote",[r("p",[t._v("删除标签")])]),r("pre",[r("code",[t._v("git tag -d <tagName>\n")])]),r("blockquote",[r("p",[t._v("推送标签到远程")])]),r("pre",[r("code",[t._v("git push origin <tagName>\n")])]),r("blockquote",[r("p",[t._v("推送所以标签")])]),r("pre",[r("code",[t._v("git push origin --tags\n")])]),r("blockquote",[r("p",[t._v("删除远程标签")])]),r("p",[t._v("删除远程标签需，要先删除本地标签，然后再执行")]),r("pre",[r("code",[t._v("git push origin :refs/tags/<tagNameg>\n")])]),r("h2",{attrs:{id:"gitignore"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#gitignore","aria-hidden":"true"}},[t._v("#")]),t._v(" gitignore")]),r("p",[r("a",{attrs:{href:"https://www.cnblogs.com/youyoui/p/8337147.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.cnblogs.com/youyoui/p/8337147.html")])]),r("p",[t._v(".gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。")]),r("p",[t._v("解决方法就是先把本地缓存删除（改变成未track状态），然后再提交:")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("git rm -r --cached .\ngit add .\ngit commit -m 'update .gitignore'\n")])]),r("h2",{attrs:{id:"问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#问题","aria-hidden":"true"}},[t._v("#")]),t._v(" 问题")]),r("p",[t._v("###git无法pull仓库refusing to merge unrelated histories")]),r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[t._v("fatal"),r("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" refusing to merge unrelated histories\n")])]),r("p",[t._v("如我在Github新建一个仓库，写了License，然后把本地一个写了很久仓库上传。这时会发现 github 的仓库和本地的没有一个共同的 commit 所以 git 不让提交，认为是写错了 origin ，如果开发者确定是这个 origin 就可以使用 "),r("strong",[t._v("--allow-unrelated-histories")]),t._v(" 告诉 git 自己确定")]),r("p",[t._v("遇到无法提交的问题，一般先pull 也就是使用 git pull origin master 这里的 origin 就是仓库，而 master 就是需要上传的分支，因为两个仓库不同，发现 git 输出 refusing to merge unrelated histories 无法 pull 内容")]),r("p",[t._v("因为他们是两个不同的项目，要把两个不同的项目合并，git需要添加一句代码，在 git pull 之后，这句代码是在git 2.9.2版本发生的，最新的版本需要添加 --allow-unrelated-histories 告诉 git 允许不相关历史合并")]),r("p",[t._v("假如我们的源是origin，分支是master，那么我们需要这样写git pull origin master --allow-unrelated-histories 如果有设置了默认上传分支就可以用下面代码")]),r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[t._v("git pull "),r("span",{attrs:{class:"token operator"}},[t._v("--")]),t._v("allow"),r("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("unrelated"),r("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("histories\n")])])])}],!1,null,null,null);e.default=o.exports}}]);