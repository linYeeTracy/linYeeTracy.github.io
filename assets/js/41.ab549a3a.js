(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{223:function(t,a,s){"use strict";s.r(a);var n=s(1),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h2",{attrs:{id:"blog"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#blog","aria-hidden":"true"}},[t._v("#")]),t._v(" blog")]),s("p",[s("a",{attrs:{href:"https://blog.csdn.net/williamfan21c/article/details/55517558",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://blog.csdn.net/williamfan21c/article/details/55517558")]),s("a",{attrs:{href:"https://www.cnblogs.com/peiyu1988/p/8192066.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Nodejs的运行原理-架构篇")]),s("a",{attrs:{href:"https://blog.csdn.net/j2IaYU7Y/article/details/81623516",target:"_blank",rel:"noopener noreferrer"}},[t._v("Nodejs探秘：深入理解单线程实现高并发原理")]),s("a",{attrs:{href:"https://www.cnblogs.com/chris-oil/p/5339305.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Node.js到底是单线程的还是多线程")]),s("a",{attrs:{href:"https://www.cnblogs.com/tingshuo/archive/2013/01/17/2864280.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("高并发下的Node.js与负载均衡")]),s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/51847546",target:"_blank",rel:"noopener noreferrer"}},[t._v("你不知道的Node.js性能优化")])]),s("h2",{attrs:{id:"node与python"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#node与python","aria-hidden":"true"}},[t._v("#")]),t._v(" node与python")]),s("ul",[s("li",[t._v("更关键的是Node本身异步的数据库I/O性能上比Python真的高很多")])]),s("p",[t._v("CRUD应用和平台本身没多大关系，更多是看上层的开源库。express + （mongo + mongoose） || （node-mysql + sequelize) 开发CRUD也快得很，灵活性是node的卖点之一。")]),s("h3",{attrs:{id:"node-js-python-的地方"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#node-js-python-的地方","aria-hidden":"true"}},[t._v("#")]),t._v(" Node.js > Python 的地方")]),s("ul",[s("li",[t._v("快：这个快有两方面，第一是V8引擎快，在V8引擎背后操刀的是Lars Bak大神，他创造过高性能SmallTalk引擎和Java Hotspot引擎(现在Java的默认VM)，他带领下的V8引擎让Javascript速度达到了一个新的阶段。第二是异步执行，Node.js功能上是一个基于V8引擎的异步网络和IO Library，和Python的Twisted很像，不同的是Node.js的event loop是很底层的深入在语言中的，可以想象成整个文件在执行的时候就在一个很大的event loop里。")]),s("li",[t._v("npm：npm可以说是用起来最顺手的package management了，npm作为Node.js的官方package management，汇集了整个社区最集中的资源。不像Python经历过easy_install和pip，还有2to3的问题。")]),s("li",[t._v("Windows支持：Node.js有微软的加持，Windows基本被视为一等公民来支持，libuv已经可以很好的做到统一跨平台的API；而Python虽然也对Windows有官方的支持，但是总感觉是二等公民，时不时出些问题。")])]),s("h3",{attrs:{id:"python-node-js-的地方"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#python-node-js-的地方","aria-hidden":"true"}},[t._v("#")]),t._v(" Python > Node.js 的地方")]),s("ul",[s("li",[t._v("语言：就单纯从语言的角度来说，Python写起来要比Javascript舒服很多。Javascript设计本身有许多缺陷，毕竟当时设计的时候只是作为在浏览器中做一些简单任务的script，所以代码一旦庞大，维护还是有困难（不过Node.js的module很大的改善了这个问题）。不过用Coffeescript可以很大的改善Javascript，几乎可以和Python等同。")]),s("li",[t._v("成熟：成熟包括语言本身已经成熟，还有Framework和ecosystem也很庞大。Node.js的绝大多数framework都很新，有的API一直在变，有的感觉已经不在维护，总之没有一个像Django那种百足之虫感觉的framework。Python的主流ORM SQLalchemy也很成熟。")])]),s("h3",{attrs:{id:"python-和-node-js-很难分高下的地方"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#python-和-node-js-很难分高下的地方","aria-hidden":"true"}},[t._v("#")]),t._v(" Python 和 Node.js 很难分高下的地方")]),s("p",[t._v("异步Style：Node.js的异步Style是CPS，也就是层层callback，基于event，和浏览器中的Javascript很像。CPS好处是让熟悉浏览器Javascript的人能很快上手，学习难度也不大。缺点是逻辑一复杂，就变得很难维护，基本上需要通过async.js这种library，或者用promise。Python的异步除了和Node.js很像的Twisted之外，也有基于coroutine的gevent，coroutine让异步代码维护起来更容易，不过学习曲线陡。应用场景：如果是一个CRUD的app，那么想都不想直接是Python，Node.js本身不擅长CRUD的app（绝大多数Node.js都是直接裸在外面的，而不是有一个Nginx在前面，否则websocket就不能用了，不过新版nginx开始支持websocket），代码又不好维护，而Python的WSGI很适合，成熟的stack也有很多。如果更偏向于real-time，比如一个chat room，那么Node.js实现更容易。这两个应用场景还是有差别的。")]),s("h2",{attrs:{id:"nodejs-多进程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nodejs-多进程","aria-hidden":"true"}},[t._v("#")]),t._v(" nodejs 多进程")]),s("p",[s("a",{attrs:{href:"https://blog.csdn.net/hongchh/article/details/79898816",target:"_blank",rel:"noopener noreferrer"}},[t._v("多进程处理实例")]),s("a",{attrs:{href:"https://github.com/hongchh/nodejs-demo/tree/master/multi-process",target:"_blank",rel:"noopener noreferrer"}},[t._v("多进程代码示例")])]),s("h2",{attrs:{id:"相关框架"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#相关框架","aria-hidden":"true"}},[t._v("#")]),t._v(" 相关框架")]),s("h3",{attrs:{id:"sails"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sails","aria-hidden":"true"}},[t._v("#")]),t._v(" sails")]),s("p",[s("a",{attrs:{href:"https://www.jianshu.com/p/ac2da4142259",target:"_blank",rel:"noopener noreferrer"}},[t._v("为什么要用sails")]),s("a",{attrs:{href:"http://sailsdoc.swift.ren/",target:"_blank",rel:"noopener noreferrer"}},[t._v("sails中文文档")])]),s("h2",{attrs:{id:"node是单线程么？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#node是单线程么？","aria-hidden":"true"}},[t._v("#")]),t._v(" node是单线程么？")]),s("p",[t._v("我们写下的js代码，是在单线程的环境中执行，但nodejs本身不是单线程的。如果我们在代码中调用了nodejs提供的异步api（如IO等），它们可能是通过底层的c(c++?)模块在另外的线程中完成。但对于我们自己的js代码来说，它们处于单线程中。因为异步函数执行完将结果通过回调函数传给我们的时候，我们的代码一次只能处理一个。")]),s("p",[t._v("在这里用debuggable.com上的那个文章中的一段比喻来讲，非常容易理解。如下：")]),s("p",[t._v("我们写的js代码就像是一个国王，而nodejs给国王提供了很多仆人。早上，一个仆人叫醒了国王，问他有什么需要。国王给他一份清单，上面列举了所有需要完成的任务，然后睡回笼觉去了。当国王回去睡觉之后，仆人才离开国王，拿着清单，给其它的仆人一个个布置任务。仆人们各自忙各自的去了，直到完成了自己的任务后，才回来把结果禀告给国王。国王一次只召见一个人，其它的人就在外面排着队等着。国王处理完这个结果后，可能给他布置一个新的任务，或者就直接让他走了，然后再召见下一个人。等所有的结果都处理完了，国王就继续睡觉去了。直接有新的仆人完成任务后过来找他。这就是国王的幸福生活。")]),s("p",[t._v("这段话对于理解nodejs的运行方式非常重要。")]),s("p",[t._v("在nodejs中，有一个队列（先进先出），保存着一个个待执行的任务。第一个任务就是我们写的js代码，它最先被执行（相当于国王给第一个仆人任务清单）。在它执行完以后（国王睡回笼觉去了），其它的任务才会加到队列上（相当于第一个仆人按照清单给其它仆人分配任务）。")]),s("h2",{attrs:{id:"process-nexttick"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#process-nexttick","aria-hidden":"true"}},[t._v("#")]),t._v(" process.nextTick")]),s("p",[t._v("nodejs的单线程让群中有些朋友很不满，他们认为如果我们需要进行一些密集计算（比如while(true)这样的），岂不是把整个线程等卡死了？我在一些资料上看到，的确是有这个担心，所以nodejs不适合用来开发cpu密集运算的程序，而适合做那些IO操作比较多，但本身不需要计算太多的程序。因为IO操作通过都是通过异步由nodejs在其它线程中完成，所以不会影响到主线程。")]),s("p",[t._v("但如果我们的程序中，难以避免地需要进行一些密集运算该怎么办？这时需要把计算分解为可递归的步骤，计算一步后，使用process.nextTick将下一步放在队列的最后，让nodejs有机会去处理那些已经在等待的任务。")]),s("h2",{attrs:{id:"node也可实现多线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#node也可实现多线程","aria-hidden":"true"}},[t._v("#")]),t._v(" node也可实现多线程")]),s("p",[s("a",{attrs:{href:"http://github.com/xk/node-threads-a-gogo.git",target:"_blank",rel:"noopener noreferrer"}},[t._v("threads_a_gogo")])]),s("h2",{attrs:{id:"node的文件路径"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#node的文件路径","aria-hidden":"true"}},[t._v("#")]),t._v(" node的文件路径")]),s("ul",[s("li",[t._v("__dirname, __filename, process.cwd()")]),s("li",[t._v("./ 或者 ../")])]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("__dirname：    获得当前执行文件所在目录的完整目录名\n__filename：   获得当前执行文件的带有完整绝对路径的文件名\nprocess.cwd()：获得当前执行node命令时候的文件夹目录名 \n./：           文件所在目录\n")])]),s("p",[t._v("结论：")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("__dirname: 总是返回被执行的 js 所在文件夹的绝对路径\n__filename: 总是返回被执行的 js 的绝对路径\nprocess.cwd(): 总是返回运行 node 命令时所在的文件夹的绝对路径\n./: 不使用require时候，./与process.cwd()一样，使用require时候，与__dirname一样\n")])]),s("blockquote",[s("p",[t._v("所以对于 "),s("code",[t._v("./")]),t._v("来说\n在 require() 中使用是跟 __dirname 的效果相同，不会因为启动脚本的目录不一样而改变，在其他情况下跟 process.cwd() 效果相同，是相对于启动脚本所在目录的路径。")])]),s("h2",{attrs:{id:"server-listen-port-hostname-backlog-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#server-listen-port-hostname-backlog-callback","aria-hidden":"true"}},[t._v("#")]),t._v(" server.listen(port, [hostname], [backlog], [callback])")]),s("h2",{attrs:{id:"fs-extra"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-extra","aria-hidden":"true"}},[t._v("#")]),t._v(" fs-extra")]),s("p",[s("a",{attrs:{href:"https://www.jianshu.com/p/d6990a03d610",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.jianshu.com/p/d6990a03d610")])]),s("h2",{attrs:{id:"require的基本用法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#require的基本用法","aria-hidden":"true"}},[t._v("#")]),t._v(" require的基本用法")]),s("p",[s("code",[t._v("require是编译时执行，read是运行时执行")]),s("img",{attrs:{src:"node/require.png",alt:"lbxx"}})]),s("h2",{attrs:{id:"使用规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用规范","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用规范")]),s("p",[t._v("只有在 require() 时才使用相对路径(./, ../)的写法，其他地方一律使用绝对路径，如下：")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 当前目录下\n path.dirname(__filename) + '/path.js'; \n// 相邻目录下\n path.resolve(__dirname, '../regx/regx.js');\n")])]),s("h1",{attrs:{id:"path模块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#path模块","aria-hidden":"true"}},[t._v("#")]),t._v(" path模块")]),s("h2",{attrs:{id:"路径规范化解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#路径规范化解析","aria-hidden":"true"}},[t._v("#")]),t._v(" 路径规范化解析")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("//对window系统，目录分隔为'\\', 对于UNIX系统，分隔符为'/'，针对'..'返回上一级；/与\\\\都被统一转换\n//path.normalize(p);\n\nvar myPath = path.normalize(__dirname + '/test/a//b//../c/utilyou.mp3');\nconsole.log(myPath); //windows: E:\\workspace\\NodeJS\\app\\fs\\test\\a\\c\\utilyou.mp3\n\n")])]),s("h2",{attrs:{id:"路径结合、合并"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#路径结合、合并","aria-hidden":"true"}},[t._v("#")]),t._v(" 路径结合、合并")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("//path.join([path1],[path2]..[pathn]);\n/**\n * [path1] 路径或表示目录的字符，\n */\n\nvar path1 = 'path1',\n    path2 = 'path2//pp\\\\',\n    path3 = '../path3';\n    \nvar myPath = path.join(path1, path2, path3);\nconsole.log(myPath); //path1\\path2\\path3\n\n")])]),s("h2",{attrs:{id:"获取绝对路径"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#获取绝对路径","aria-hidden":"true"}},[t._v("#")]),t._v(" 获取绝对路径")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("//path.resolve(path1, [path2]..[pathn]);\n\n//以应用程序为起点，根据参数字符串解析出一个绝对路径\n\n/**\n * path 必须至少一个路径字符串值\n * [pathn] 可选路径字符串\n */\n\nvar myPath = path.resolve('path1', 'path2', 'a/b\\\\c/');\nconsole.log(myPath);//E:\\workspace\\NodeJS\\path1\\path2\\a\\b\\c\n\n")])]),s("h1",{attrs:{id:"获取相对路径"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#获取相对路径","aria-hidden":"true"}},[t._v("#")]),t._v(" 获取相对路径")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("//path.relative(from, to);\n//获取两路径之间的相对关系\n\n/**\n * from 当前路径，并且方法返回值是基于from指定到to的相对路径\n * to   到哪路径，\n */\n\nvar from = 'c:\\\\from\\\\a\\\\',\n    to = 'c:/test/b';\n\nvar _path = path.relative(from, to);\nconsole.log(_path); //..\\..\\test\\b; 表示从from到to的相对路径\n\n")])]),s("h2",{attrs:{id:"path-basename-path-ext"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#path-basename-path-ext","aria-hidden":"true"}},[t._v("#")]),t._v(" path.basename(path, [ext])")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 获取路径中文件名,后缀是可选的，如果加，请使用'.ext'方式来匹配，则返回值中不包括后缀名；\n\nvar myPath = path.basename(__dirname + '/test/util you.mp3', '.mp3');\nconsole.log(myPath);\n\n")])]),s("h2",{attrs:{id:"path-extname-path"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#path-extname-path","aria-hidden":"true"}},[t._v("#")]),t._v(" path.extname(path)")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("//获取路径中的扩展名，如果没有'.'，则返回空\n")])]),s("h1",{attrs:{id:"q-a"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#q-a","aria-hidden":"true"}},[t._v("#")]),t._v(" Q & A")]),s("h2",{attrs:{id:"all-frames-true"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#all-frames-true","aria-hidden":"true"}},[t._v("#")]),t._v(' "all_frames": true')]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var bodyParser = require('body-parser');\napp.use(bodyParser.json({limit: '50mb'}));\napp.use(bodyParser.urlencoded({limit: '50mb', extended: true}));\n")])]),s("h1",{attrs:{id:"node环境变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#node环境变量","aria-hidden":"true"}},[t._v("#")]),t._v(" node环境变量")]),s("p",[t._v("process 对象是一个 global （全局变量），提供有关信息，控制当前 Node.js 进程。\n作为一个对象，它对于 Node.js 应用程序始终是可用的，故无需使用 require()")]),s("h2",{attrs:{id:"process-env"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#process-env","aria-hidden":"true"}},[t._v("#")]),t._v(" process.env")]),s("blockquote",[s("p",[t._v("属性返回一个包含用户环境信息的对象。")])]),s("p",[t._v("依靠这个我们就可以给服务器上打上一个标签。这样的话，我们就能根据不同的环境，做一些配置上的处理。比如开启 sourceMap，后端接口的域名切换等等。")]),s("h2",{attrs:{id:"环境变量的配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#环境变量的配置","aria-hidden":"true"}},[t._v("#")]),t._v(" 环境变量的配置")]),s("h3",{attrs:{id:"windows配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#windows配置","aria-hidden":"true"}},[t._v("#")]),t._v(" windows配置")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("#node中常用的到的环境变量是NODE_ENV，首先查看是否存在 \nset NODE_ENV \n#如果不存在则添加环境变量 \nset NODE_ENV=production \n#环境变量追加值 set 变量名=%变量名%;变量内容 \nset path=%path%;C:\\web;C:\\Tools \n#某些时候需要删除环境变量 \nset NODE_ENV=\n")])]),s("p",[t._v("永久配置")]),s("p",[t._v("右键(此电脑) -> 属性(R) -> 高级系统设置 -> 环境变量(N)...")]),s("h3",{attrs:{id:"linux配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#linux配置","aria-hidden":"true"}},[t._v("#")]),t._v(" linux配置")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("#node中常用的到的环境变量是NODE_ENV，首先查看是否存在\necho $NODE_ENV\n#如果不存在则添加环境变量\nexport NODE_ENV=production\n#环境变量追加值\nexport path=$path:/home/download:/usr/local/\n#某些时候需要删除环境变量\nunset NODE_ENV\n#某些时候需要显示所有的环境变量\nenv\n")])]),s("p",[t._v("永久")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 打开配置文件所在\n# 所有用户都生效\nvim /etc/profile\n# 当前用户生效\nvim ~/.bash_profile\n\n在文件末尾添加类似如下语句进行环境变量的设置或修改\n# 在文件末尾添加如下格式的环境变量\nexport path=$path:/home/download:/usr/local/\nexport NODE_ENV = product\n\n最后修改完成后需要运行如下语句令系统重新加载\n# 修改/etc/profile文件后\nsource /etc/profile\n# 修改~/.bash_profile文件后\nsource ~/.bash_profile\n")])]),s("blockquote",[s("p",[t._v("export NODE_ENV=production ，那么会在所有的项目下都是正式环境，当我们使用命令 npm install 后下载依赖包时，只会把 package.json中的dependencies依赖项下载下来，对于devDependencies中的依赖包是下载不下来的。")])]),s("p",[s("a",{attrs:{href:"https://www.cnblogs.com/tugenhua0707/p/9780621.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.cnblogs.com/tugenhua0707/p/9780621.html")])]),s("h2",{attrs:{id:"模块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模块","aria-hidden":"true"}},[t._v("#")]),t._v(" 模块")]),s("h3",{attrs:{id:"util-模块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#util-模块","aria-hidden":"true"}},[t._v("#")]),t._v(" util 模块")]),s("blockquote",[s("p",[t._v("util 是一个Node.js 核心模块，提供常用函数的集合，用于弥补核心JavaScript 的功能 过于精简的不足。")])]),s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token comment"}},[t._v("// 输出信息")]),t._v("\nutil"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("debug")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'test'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),s("span",{attrs:{class:"token comment"}},[t._v("//输出到标准错误流,增加前缀")]),t._v("\ndebug util"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("error")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'test'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{attrs:{class:"token comment"}},[t._v("//输出到标准错误流,不增加前缀")]),t._v("\nutil"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("log")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'test'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),s("span",{attrs:{class:"token comment"}},[t._v("//输出到标准输出流,增加时间前缀,增加换行")]),t._v("\n\n"),s("span",{attrs:{class:"token comment"}},[t._v("// 数据类型验证")]),t._v("\nutil"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("isDate")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arg"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nutil"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("isArray")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arg"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nutil"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("isError")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arg"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nutil"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("isRegExp")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arg"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nutil"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("inspect")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("object"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("showHidden"),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("depth"),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("colors"),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("是一个将任意对象转换 为字符串的方法，通常用于调试和错误输出。\n")])]),s("h2",{attrs:{id:"nodejs下命令行参数解析工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nodejs下命令行参数解析工具","aria-hidden":"true"}},[t._v("#")]),t._v(" nodejs下命令行参数解析工具")]),s("p",[s("a",{attrs:{href:"https://github.com/yargs/yargs",target:"_blank",rel:"noopener noreferrer"}},[t._v(" https://github.com/yargs/yargs")])]),s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" argv "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("require")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'yargs'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("argv"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("log")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'编译参数: \\r\\n'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" argv"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v("'\\r\\n'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("$ gulp build "),s("span",{attrs:{class:"token operator"}},[t._v("--")]),t._v("module"),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("m "),s("span",{attrs:{class:"token operator"}},[t._v("--")]),t._v("mobile "),s("span",{attrs:{class:"token operator"}},[t._v("--")]),t._v("rootFontSize"),s("span",{attrs:{class:"token operator"}},[t._v("=")]),s("span",{attrs:{class:"token number"}},[t._v("25")]),t._v("\n\n编译参数"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" _"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v("'build'")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  help"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token boolean"}},[t._v("false")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  version"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token boolean"}},[t._v("false")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  module"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v("'m'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  mobile"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token boolean"}},[t._v("true")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  rootFontSize"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("25")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{attrs:{class:"token string"}},[t._v("'$0'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v("'C:\\\\Users\\\\www\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\gulp\\\\bin\\\\gulp.js'")]),t._v(" \n "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),s("h2",{attrs:{id:"fs-mkdir-和-fs-mkdirsync-支持递归参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-mkdir-和-fs-mkdirsync-支持递归参数","aria-hidden":"true"}},[t._v("#")]),t._v(" fs.mkdir 和 fs.mkdirSync 支持递归参数")]),s("p",[t._v("这两个 API 对应于 Linux mkdir 指令，但却不支持 -p 参数来递归创建目录。导致在之前版本中，fs.mkdir 创建目录时，我们需要确保父级目录一定是存在的，否则会抛出 ENOENT 的错误。所以社区一般不会直接使用，而是用 mkdirp 这个模块。在新版本中，增加了 recursive 的选项，把该能力直接继承到了内核，会方便不少：")]),s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("fs"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("mkdirSync")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'/home/admin/aaa/bbb/ccc'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" recursive"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),s("h2",{attrs:{id:"cli-flag-自动补全"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cli-flag-自动补全","aria-hidden":"true"}},[t._v("#")]),t._v(" CLI Flag 自动补全")]),s("p",[t._v("我们都知道 Node 命令行启动时可以带上一些 flag 来开启诸如 GC 追踪、实验性 API 等能力。但在之前版本中，由于没有自动补全功能，导致我们经常需要查文档来找 flag 那长长的名字。在新版本里面，可以通过简单的操作让 bash 能自动补全这些 flag 了，使用方法如下：")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ node --completion-bash > node_bash_completion\n$ source node_bash_completion\n")])]),s("p",[t._v("完成后，当我们在当前 bash 输入 node -- 后基于可以通过 TAB 键进行命令补全了。值得一提的是，这个功能是在 PR 20713 里面实现的，有兴趣的同学可以看下实现过程。")])])}],!1,null,null,null);a.default=e.exports}}]);