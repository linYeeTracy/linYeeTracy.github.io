(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{244:function(t,a,e){"use strict";e.r(a);var s=e(1),n=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"commonjs、amd-cmd、es6-modules-以及-webpack-原理浅析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#commonjs、amd-cmd、es6-modules-以及-webpack-原理浅析","aria-hidden":"true"}},[t._v("#")]),t._v(" CommonJS、AMD/CMD、ES6 Modules 以及 webpack 原理浅析")]),e("h2",{attrs:{id:"commonjs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#commonjs","aria-hidden":"true"}},[t._v("#")]),t._v(" CommonJS")]),e("p",[t._v("Node.js是commonJS规范的主要实践者，它有四个重要的环境变量为模块化的实现提供支持："),e("code",[t._v("module、exports、require、global")]),t._v("。")]),e("p",[t._v("实际使用时:")]),e("p",[t._v("用"),e("code",[t._v("module.exports")]),t._v("定义当前模块对外输出的接口\n用"),e("code",[t._v("require")]),t._v("加载模块")]),e("p",[t._v("但是我们其实并没有直接定义 "),e("code",[t._v("module、exports、require")]),t._v(" 这些模块，以及 Node 的 API 文档中提到的"),e("code",[t._v("__filename")]),t._v("、"),e("code",[t._v("__dirname")]),t._v("。那么是从何而来呢？其实在编译的过程中，Node 对我们定义的 JS 模块进行了一次基础的包装：")]),e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token keyword"}},[t._v("function")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exports"),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" require"),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" modules"),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" __filename"),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" __dirname"),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),e("p",[t._v("这样我们便可以访问这些传入的arguments以及隔离了彼此的作用域。CommonJS 的一个模块，就是一个脚本文件。\nrequire命令第一次加载该脚本，就会执行整个脚本，然后在内存生成一个对象。")]),e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  id"),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v("'...'")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  exports"),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  loaded"),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token boolean"}},[t._v("true")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),e("p",[t._v("以后需要用到这个模块的时候，就会到exports属性上面取值。"),e("code",[t._v("即使再次执行require命令，也不会再次执行该模块，而是到缓存之中取值")]),t._v("。\ncommonJS用同步的方式加载模块，只有在代码执行到require的时候，才回去执行加载。\n在服务端，模块文件都存在本地磁盘，读取非常快，所以这样做不会有问题。\n但是在浏览器端，限于网络原因，更合理的方案是使用异步加载。")]),e("h2",{attrs:{id:"es6-module"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#es6-module","aria-hidden":"true"}},[t._v("#")]),t._v(" ES6 Module")]),e("p",[t._v("ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，旨在成为浏览器和服务器通用的模块解决方案。其模块功能主要由两个命令构成："),e("code",[t._v("export和import")]),t._v(":\n"),e("code",[t._v("export")]),t._v(" 命令用于规定模块的对外接口\n"),e("code",[t._v("import")]),t._v(" 命令用于输入其他模块提供的功能。")]),e("p",[t._v("ES6 Modules不是对象，import命令会被 JavaScript 引擎静态分析，在编译时就引入模块代码，而不是在代码运行时加载，所以无法实现条件加载。也正因为这个，使得静态分析成为可能。")]),e("h3",{attrs:{id:"es6-module-与-commonjs模块的差异"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#es6-module-与-commonjs模块的差异","aria-hidden":"true"}},[t._v("#")]),t._v(" ES6 module 与 commonJS模块的差异")]),e("h4",{attrs:{id:"commonjs-模块输出的是一个值的拷贝，es6-模块输出的是值的引用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#commonjs-模块输出的是一个值的拷贝，es6-模块输出的是值的引用","aria-hidden":"true"}},[t._v("#")]),t._v(" CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用")]),e("ol",[e("li",[t._v("CommonJS 模块输出的是值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。")]),e("li",[t._v("ES6 Modules 的运行机制与 CommonJS 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令import，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。换句话说，ES6 的 import 有点像 Unix 系统的“符号连接”，原始值变了，import加载的值也会跟着变。因此，ES6 模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。")])]),e("h4",{attrs:{id:"commonjs-模块是运行时加载，es6-模块是编译时输出接口。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#commonjs-模块是运行时加载，es6-模块是编译时输出接口。","aria-hidden":"true"}},[t._v("#")]),t._v(" CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。")]),e("p",[t._v("u7")]),e("h2",{attrs:{id:"amd"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#amd","aria-hidden":"true"}},[t._v("#")]),t._v(" AMD")]),e("p",[t._v("AMD 是 RequireJS 在推广过程中对模块定义的规范化产出。AMD 规范采用异步方式加载模块，"),e("code",[t._v("模块的加载不影响它后面语句的运行")]),t._v("。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。说了这么多，来看一下一个AMD规范的RequireJS 是如何定义的：")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 定义 moduleA 依赖 a, b模块\ndefine(['./a','./b'],function(a,b){\n   a.doSomething()\n   b.doSomething()\n}) \n\n// 使用\nrequire(['./moduleA'], function(moduleA) {\n  // ...\n})\n")])]),e("h2",{attrs:{id:"cmd"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cmd","aria-hidden":"true"}},[t._v("#")]),t._v(" CMD")]),e("p",[t._v("CMD 是 SeaJS 在推广过程中对模块定义的规范化产出。AMD 推崇依赖前置、提前执行，CMD推崇依赖就近、延迟执行。比如require.js在申明依赖的模块时会在第一之间加载并执行模块内的代码，而CMD则是在使用的时候就近定义：")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("define(function(require, exports, module) {\n  var a = require('./a')\n  a.doSomething()\n  var b = require('./b')\n  b.doSomething()\n})\n")])]),e("p",[t._v("代码在运行时，首先是不知道依赖的，需要遍历所有的require关键字，找出后面的依赖。具体做法是将function toString后，用正则匹配出require关键字后面的依赖。显然，这是一种牺牲性能来换取更多开发便利的方法。而 AMD 是依赖前置的，换句话说，在解析和执行当前模块之前，模块作者必须指明当前模块所依赖的模块。代码在一旦运行到此处，能立即知晓依赖。而无需遍历整个函数体找到它的依赖，因此性能有所提升，缺点就是开发者必须显式得指明依赖——这会使得开发工作量变大，比如：当你写到函数体内部几百上千行的时候，忽然发现需要增加一个依赖，你不得不回到函数顶端来将这个依赖添加进数组。")])])}],!1,null,null,null);a.default=n.exports}}]);