(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{175:function(t,n,s){},197:function(t,n,s){"use strict";var a=s(175);s.n(a).a},250:function(t,n,s){"use strict";s.r(n);s(197);var a=s(1),e=Object(a.a)({},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("div",{staticClass:"content"},[s("p",[t._v(t._s(t.$page))]),t._m(0),t._m(1),t._m(2),s("p",[t._v("这些是创建请求时可以用的配置选项。只有 url 是必需的。如果没有指定 method，请求将默认使用 get 方法。")]),t._m(3),t._m(4),s("p",[t._v("某个请求的响应包含以下信息")]),t._m(5),s("p",[t._v("使用 then 时，你将接收下面这样的响应：")]),t._m(6),s("p",[t._v("在使用 catch 时，或传递 rejection callback 作为 then 的第二个参数时，响应可以通过 error 对象可被使用")]),t._m(7),t._m(8),t._m(9),t._m(10),t._m(11),t._m(12),t._m(13),s("p",[t._v("直接不对客户端进行限制，把控制上传大小的事情完全交由服务端：")]),t._m(14),s("p",[t._v("axios 默认不会对 301 进行处理，需要自行设置")]),t._m(15),s("p",[t._v("实际上很多上传库都在客户端做了一些上传的限制，或者 form-data 库对服务端上传做了一些限制，这是为了避免不受限制导致服务器被刷雪崩的情况所做的防御操作，换言之，不要因为有这个 feature 就觉得非常麻烦，实际上从 Nignx 层到后端都会有默认限制，我们的处理应该是根据需求去调整，而不是一口气全部取消了，而寄期望于「别人家的服务」。")]),t._m(16),s("p",[t._v("后端服务的app.js文件，在路由配置前添加以下代码")]),t._m(17),t._m(18),s("p",[t._v("当我们访问某个地址页面时，有时会要求我们重新登录后再访问该页面，也就是身份认证失效了，如token丢失了，或者是token依然存在本地，但是却失效了，所以单单判断本地有没有token值不能解决问题。此时请求时服务器返回的是401错误，授权出错，也就是没有权利访问该页面。\n我们可以在发送所有请求之前和操作服务器响应数据之前对这种情况过滤。")]),t._m(19)])},[function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"官网"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#官网","aria-hidden":"true"}},[this._v("#")]),this._v(" 官网")])},function(){var t=this.$createElement,n=this._self._c||t;return n("p",[n("a",{attrs:{href:"https://www.kancloud.cn/yunye/axios/234845",target:"_blank",rel:"noopener noreferrer"}},[this._v("官网")])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"请求配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#请求配置","aria-hidden":"true"}},[this._v("#")]),this._v(" 请求配置")])},function(){var t=this.$createElement,n=this._self._c||t;return n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("{\n  // `url` 是用于请求的服务器 URL\n  url: '/user',\n\n  // `method` 是创建请求时使用的方法\n  method: 'get', // 默认是 get\n\n  // `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。\n  // 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL\n  baseURL: 'https://some-domain.com/api/',\n\n  // `transformRequest` 允许在向服务器发送前，修改请求数据\n  // 只能用在 'PUT', 'POST' 和 'PATCH' 这几个请求方法\n  // 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream\n  transformRequest: [function (data) {\n    // 对 data 进行任意转换处理\n\n    return data;\n  }],\n\n  // `transformResponse` 在传递给 then/catch 前，允许修改响应数据\n  transformResponse: [function (data) {\n    // 对 data 进行任意转换处理\n\n    return data;\n  }],\n\n  // `headers` 是即将被发送的自定义请求头\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` 是即将与请求一起发送的 URL 参数\n  // 必须是一个无格式对象(plain object)或 URLSearchParams 对象\n  params: {\n    ID: 12345\n  },\n\n  // `paramsSerializer` 是一个负责 `params` 序列化的函数\n  // (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)\n  paramsSerializer: function(params) {\n    return Qs.stringify(params, {arrayFormat: 'brackets'})\n  },\n\n  // `data` 是作为请求主体被发送的数据\n  // 只适用于这些请求方法 'PUT', 'POST', 和 'PATCH'\n  // 在没有设置 `transformRequest` 时，必须是以下类型之一：\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - 浏览器专属：FormData, File, Blob\n  // - Node 专属： Stream\n  data: {\n    firstName: 'Fred'\n  },\n\n  // `timeout` 指定请求超时的毫秒数(0 表示无超时时间)\n  // 如果请求话费了超过 `timeout` 的时间，请求将被中断\n  timeout: 1000,\n\n  // `withCredentials` 表示跨域请求时是否需要使用凭证\n  withCredentials: false, // 默认的\n\n  // `adapter` 允许自定义处理请求，以使测试更轻松\n  // 返回一个 promise 并应用一个有效的响应 (查阅 [response docs](#response-api)).\n  adapter: function (config) {\n    /* ... */\n  },\n\n  // `auth` 表示应该使用 HTTP 基础验证，并提供凭据\n  // 这将设置一个 `Authorization` 头，覆写掉现有的任意使用 `headers` 设置的自定义 `Authorization`头\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` 表示服务器响应的数据类型，可以是 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'\n  responseType: 'json', // 默认的\n\n  // `xsrfCookieName` 是用作 xsrf token 的值的cookie的名称\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` 是承载 xsrf token 的值的 HTTP 头的名称\n  xsrfHeaderName: 'X-XSRF-TOKEN', // 默认的\n\n  // `onUploadProgress` 允许为上传处理进度事件\n  onUploadProgress: function (progressEvent) {\n    // 对原生进度事件的处理\n  },\n\n  // `onDownloadProgress` 允许为下载处理进度事件\n  onDownloadProgress: function (progressEvent) {\n    // 对原生进度事件的处理\n  },\n\n  // `maxContentLength` 定义允许的响应内容的最大尺寸\n  maxContentLength: 2000,\n\n  // `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，promise 将被 resolve; 否则，promise 将被 rejecte\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // 默认的\n  },\n\n  // `maxRedirects` 定义在 node.js 中 follow 的最大重定向数目\n  // 如果设置为0，将不会 follow 任何重定向\n  maxRedirects: 5, // 默认的\n\n  // `httpAgent` 和 `httpsAgent` 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。允许像这样配置选项：\n  // `keepAlive` 默认没有启用\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // 'proxy' 定义代理服务器的主机名称和端口\n  // `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据\n  // 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。\n  proxy: {\n    host: '127.0.0.1',\n    port: 9000,\n    auth: : {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` 指定用于取消请求的 cancel token\n  // （查看后面的 Cancellation 这节了解更多）\n  cancelToken: new CancelToken(function (cancel) {\n  })\n}\n")])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h1",{attrs:{id:"响应结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#响应结构","aria-hidden":"true"}},[this._v("#")]),this._v(" 响应结构")])},function(){var t=this.$createElement,n=this._self._c||t;return n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("{\n  // `data` 由服务器提供的响应\n  data: {},\n\n  // `status` 来自服务器响应的 HTTP 状态码\n  status: 200,\n\n  // `statusText` 来自服务器响应的 HTTP 状态信息\n  statusText: 'OK',\n\n  // `headers` 服务器响应的头\n  headers: {},\n\n  // `config` 是为请求提供的配置信息\n  config: {}\n}\n")])])},function(){var t=this.$createElement,n=this._self._c||t;return n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("axios.get('/user/12345')\n  .then(function(response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n")])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h1",{attrs:{id:"配置的默认值-defaults"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#配置的默认值-defaults","aria-hidden":"true"}},[this._v("#")]),this._v(" 配置的默认值/defaults")])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"全局的axios默认值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#全局的axios默认值","aria-hidden":"true"}},[this._v("#")]),this._v(" 全局的axios默认值")])},function(){var t=this.$createElement,n=this._self._c||t;return n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("axios.defaults.baseURL = 'https://api.example.com';\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n")])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"自定义实例默认值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自定义实例默认值","aria-hidden":"true"}},[this._v("#")]),this._v(" 自定义实例默认值")])},function(){var t=this.$createElement,n=this._self._c||t;return n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("// 创建实例时设置配置的默认值\nvar instance = axios.create({\n  baseURL: 'https://api.example.com'\n});\n\n// 在实例已创建后修改默认值\ninstance.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n")])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"axios-相关问题解决"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#axios-相关问题解决","aria-hidden":"true"}},[this._v("#")]),this._v(" axios 相关问题解决")])},function(){var t=this.$createElement,n=this._self._c||t;return n("h3",{attrs:{id:"request-body-larger-than-maxbodylength-limit"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#request-body-larger-than-maxbodylength-limit","aria-hidden":"true"}},[this._v("#")]),this._v(" Request body larger than maxBodyLength limit")])},function(){var t=this.$createElement,n=this._self._c||t;return n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("maxContentLength: Infinity\n")])])},function(){var t=this.$createElement,n=this._self._c||t;return n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("maxRedirects: 5\n")])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h3",{attrs:{id:"axios-options请求的跨域问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#axios-options请求的跨域问题","aria-hidden":"true"}},[this._v("#")]),this._v(" axios options请求的跨域问题")])},function(){var t=this.$createElement,n=this._self._c||t;return n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('app.all(\'*\', function(req, res, next) {\n    res.header("Access-Control-Allow-Origin", "*");\n    res.header("Access-Control-Allow-Headers", "X-Requested-With,Content-Type");\n    res.header("Access-Control-Allow-Methods","PUT,POST,GET,DELETE,OPTIONS");\n    next();\n});\n')])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h3",{attrs:{id:"拦截器的使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#拦截器的使用","aria-hidden":"true"}},[this._v("#")]),this._v(" 拦截器的使用")])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token comment"}},[t._v("// http request 请求拦截器，有token值则配置上token值")]),t._v("\naxios"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("interceptors"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("request"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("use")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    config "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("token"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  "),s("span",{attrs:{class:"token comment"}},[t._v("// 每次发送请求之前判断是否存在token，如果存在，则统一在http请求的header都加上token，不用每次请求都手动添加了")]),t._v("\n            config"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("headers"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Authorization "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" token"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" config"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    err "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Promise"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("reject")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{attrs:{class:"token comment"}},[t._v("// http response 服务器响应拦截器，这里拦截401错误，并重新跳入登页重新获取token")]),t._v("\naxios"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("interceptors"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("response"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("use")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    response "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" response"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    error "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("error"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("response"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("error"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("response"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("status"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("401")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                    "),s("span",{attrs:{class:"token comment"}},[t._v("// 这里写清除token的代码")]),t._v("\n                    router"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("replace")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                        path"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v("'login'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                        query"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("redirect"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" router"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("currentRoute"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fullPath"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("   "),s("span",{attrs:{class:"token comment"}},[t._v("//登录成功后跳入浏览的当前页面")]),t._v("\n                    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Promise"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("reject")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("error"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("response"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])}],!1,null,null,null);n.default=e.exports}}]);