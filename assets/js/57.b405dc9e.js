(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{196:function(e,t,a){e.exports=a.p+"assets/img/rpm_path.7d1f7300.png"},210:function(e,t,a){"use strict";a.r(t);var r=[function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",{staticClass:"content"},[r("h2",{attrs:{id:"linux-命令大全"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#linux-命令大全","aria-hidden":"true"}},[e._v("#")]),e._v(" linux 命令大全")]),r("p",[r("a",{attrs:{href:"http://man.linuxde.net/systemctl",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://man.linuxde.net/systemctl")])]),r("h2",{attrs:{id:"重启"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#重启","aria-hidden":"true"}},[e._v("#")]),e._v(" 重启")]),r("p",[r("a",{attrs:{href:"https://blog.csdn.net/skh2015java/article/details/79489747",target:"_blank",rel:"noopener noreferrer"}},[e._v("重启")]),r("a",{attrs:{href:"https://www.cnblogs.com/ningvsban/p/3663337.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("关机")])]),r("h2",{attrs:{id:"基础命令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基础命令","aria-hidden":"true"}},[e._v("#")]),e._v(" 基础命令")]),r("table",[r("thead",[r("tr",[r("th",[e._v("描述")]),r("th",[e._v("命令")])])]),r("tbody",[r("tr",[r("td",[e._v("查看端口是否被占用")]),r("td",[e._v("lsof -i:80")])]),r("tr",[r("td",[e._v("查看占用端口的进程信息")]),r("td",[e._v("ps pid")])]),r("tr",[r("td",[e._v("查看distributor")]),r("td",[e._v("lsb_release -a")])]),r("tr",[r("td",[e._v("rz")]),r("td",[e._v("上传文件到服务器，基于Zmodem协议")])]),r("tr",[r("td",[e._v("sz")]),r("td",[e._v("从服务器导出到本地")])]),r("tr",[r("td",[e._v("grep 'backup' -C 2 /opt/gitlab/embedded/service/gitlab-rails/config/gitlab.yml")]),r("td",[e._v("在文件中查找关键字")])]),r("tr",[r("td",[e._v("cat /etc/shells")]),r("td",[e._v("查看系统支持的shell格式")])]),r("tr",[r("td",[e._v("echo $$")]),r("td",[e._v("获取bash id")])]),r("tr",[r("td",[e._v("date -s 06/10/96")]),r("td")]),r("tr",[r("td",[e._v("date -s 9:48:00")]),r("td")]),r("tr",[r("td"),r("td")]),r("tr",[r("td"),r("td")]),r("tr",[r("td"),r("td")]),r("tr",[r("td"),r("td")]),r("tr",[r("td"),r("td")]),r("tr",[r("td"),r("td")]),r("tr",[r("td"),r("td")])])]),r("ul",[r("li",[e._v("查看端口是否被占用 netstat -tnlp | grep 80")]),r("li",[e._v("杀死进程 kill -9 [端口id], 杀不掉就pkill -9 进程名")]),r("li",[e._v("根据进程号找到相应目录  pwdx 进程号")])]),r("h2",{attrs:{id:"服务器时间同步"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#服务器时间同步","aria-hidden":"true"}},[e._v("#")]),e._v(" 服务器时间同步")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("service ntpd  status # 查看ntpd的状态\n---\nntpdate ntp1.aliyun.com # 联网情况，同步互联网的时间(可自行找一个时间服务器)\n---\nservice ntpd start # 作为时间服务器的那台机器需要开启ntpd服务，其他机器不用开启\nntpdate 时间服务器的ip # 其它机器依次执行同步命令\n")])]),r("p",[e._v("配置定时任务同步时间")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("0 3 * * * /usr/sbin/ntpdate -u ntp1.aliyun.com\n")])]),r("h2",{attrs:{id:"查看主机信息"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#查看主机信息","aria-hidden":"true"}},[e._v("#")]),e._v(" 查看主机信息")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("[root@pera ~]# more /etc/redhat-release \nRed Hat Enterprise Linux Server release 5.6(Tikanga)\n[root@pera ~]# uname -a\nLinux pera 2.6.18-238.el5xen #1 SMP Sun Dec 1914:42:02 EST 2010 x86_64 x86_64 x86_64 GNU/Linux\n[root@pera ~]# more /proc/cpuinfo |grepmodel \nmodel           : 15\nmodel name      : Intel(R)Pentium(R) Dual  CPU  E2180  @ 2.00GHz\nmodel           : 15\nmodel name      : Intel(R)Pentium(R) Dual  CPU  E2180  @ 2.00GHz\n[root@pera ~]# cat /proc/meminfo |grep Mem\nMemTotal:      1784832 kB\nMemFree:          5528kB\n[root@pera ~]# free\n            total       used       free    shared    buffers     cached\nMem:       1784832   1777060       7772          0       964    1600104\n-/+ buffers/cache:     175992   1608840\nSwap:      5144568    150492    4994076\n")])]),r("h2",{attrs:{id:"权限分配"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#权限分配","aria-hidden":"true"}},[e._v("#")]),e._v(" 权限分配")]),r("p",[r("a",{attrs:{href:"https://www.cnblogs.com/anech/p/6920509.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("权限分配")])]),r("h2",{attrs:{id:"软连接和硬连接"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#软连接和硬连接","aria-hidden":"true"}},[e._v("#")]),e._v(" 软连接和硬连接")]),r("p",[r("a",{attrs:{href:"https://www.cnblogs.com/kex1n/p/5193826.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("软连接和硬连接")])]),r("h2",{attrs:{id:"关机与重启"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#关机与重启","aria-hidden":"true"}},[e._v("#")]),e._v(" 关机与重启")]),r("h3",{attrs:{id:"重启-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#重启-2","aria-hidden":"true"}},[e._v("#")]),e._v(" 重启")]),r("ol",[r("li",[e._v("reboot")]),r("li",[e._v("shutdown -r now 立刻重启(root用户使用)")]),r("li",[e._v("shutdown -r 10 过10分钟自动重启(root用户使用)")]),r("li",[e._v("shutdown -r 20:35 在时间为20:35时候重启(root用户使用)")])]),r("h3",{attrs:{id:"关机"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#关机","aria-hidden":"true"}},[e._v("#")]),e._v(" 关机")]),r("p",[e._v("halt   立刻关机\n2、poweroff  立刻关机\n3、shutdown -h now 立刻关机(root用户使用)\n4、shutdown -h 10 10分钟后自动关机")]),r("h2",{attrs:{id:"yum-rpm-源码安装"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#yum-rpm-源码安装","aria-hidden":"true"}},[e._v("#")]),e._v(" yum / rpm / 源码安装")]),r("h3",{attrs:{id:"源代码形式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#源代码形式","aria-hidden":"true"}},[e._v("#")]),e._v(" 源代码形式")]),r("ul",[r("li",[r("p",[e._v("绝大多数开源软件都是直接以原码形式发布的")])]),r("li",[r("p",[e._v("源代码一般会被打成.tar.gz的归档压缩文件")])]),r("li",[r("p",[e._v("源代码需要编译成为二进制形式之后才能够运行使用")])])]),r("p",[e._v("源代码基本编译流程：")]),r("ul",[r("li",[r("p",[e._v(".configure 检查编译环境；")])]),r("li",[r("p",[e._v("make对源代码进行编译；")])]),r("li",[r("p",[e._v("make insall 将生成的可执行文件安装到当前计算机中")])])]),r("h3",{attrs:{id:"rpm"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rpm","aria-hidden":"true"}},[e._v("#")]),e._v(" RPM")]),r("p",[e._v("1.源代码形式的特点：操作复杂、编译时间长、极易出现问题、依赖关系复杂")]),r("p",[e._v("2.为了方便，RPM（redhat package manager）")]),r("p",[e._v("3.RPM通过将代码基于特定平台系统编译为可执行文件，并保存依赖关系，来简化开源软件的安装管理。针对不同的系统设定不同的包")]),r("p",[e._v("4.常用命令规范：linuxcast-1.2.0-30.el6.1686.rpm 包名-版本号-适用平台-32/64-rpm")]),r("p",[e._v("5.使用rpm –i software.rpm(安装)；")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("rpm -e software.rpm(卸载)；\nrpm -e RPM包名 --nodeps // 忽略依赖关系\n\nrpm –U software.rpm(升级形式安装)；\n\nrpm –ivh http://www.linuxcast.net/software.rpm(支持通过http\\ftp协议形式安装)\n\n-v 显示详细信息；-h显示进度条\n\n查询功能：\n查询一个包是否被安装：# rpm -q < rpm package name>\nrpm –qa 列出全部已经安装的.rpm软件  rpm –qa |grep ***\n列出服务器上的一个文件属于哪一个RPM包：#rpm -qf\n列出该包中有哪些文件：# rpm -ql < rpm package name>\n得到被安装的包的信息：# rpm -qi < rpm package name>\n")])]),r("h3",{attrs:{id:"yum"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#yum","aria-hidden":"true"}},[e._v("#")]),e._v(" YUM")]),r("ol",[r("li",[e._v("rpm软件包形式的管理虽然方便，但是需要手工解决软件包的依赖关系。很多时候安装一个软件安装一个软件需要安装1个或者多个其他软件，手动解决时，很复杂，yum解决这些问题。Yum是rpm的前端程序，主要目的是设计用来自动解决rpm的依赖关系，其特点：")])]),r("p",[e._v("1）  自动解决依赖关系；2）可以对rpm进行分组，基于组进行安装操作；3）引入仓库概念，支持多个仓库；4）配置简单")]),r("ol",{attrs:{start:"2"}},[r("li",[r("p",[e._v("yum仓库用来存放所有的现有的.rpm包，当使用yum安装一个rpm包时，需要依赖关系，会自动在仓库中查找依赖软件并安装。仓库可以是本地的，也可以是HTTP、FTP、nfs形式使用的集中地、统一的网络仓库。")])]),r("li",[r("p",[e._v("仓库的配置文件/etc/yum.repos.d目录下")])]),r("li",[r("p",[e._v("使用：")])])]),r("p",[e._v("1）yum install 安装；")]),r("p",[e._v("2)yum remove卸载；")]),r("p",[e._v("3)yum update 升级制定软件")]),r("p",[e._v("4)yumsearch ** 查询软件：可以使用")]),r("ol",{attrs:{start:"5"}},[r("li",[e._v("安装的时候，会下载软件包.Rpm在安装，所以用国内仓库")])]),r("p",[e._v("改变镜像源1）访问地址http://mirrors.163.com/；2）点centos使用帮助；3）按步骤来")]),r("h3",{attrs:{id:"yum-下载rpm包"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#yum-下载rpm包","aria-hidden":"true"}},[e._v("#")]),e._v(" yum 下载RPM包")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("yum install --downloadonly <package-name>\n")])]),r("p",[e._v("下载的rpm包默认在"),r("code",[e._v("/var/cache/yum/x86_64/[centos/fedora-version]/[repository]/packages")]),e._v("\n下载到指定目录: "),r("code",[e._v("yum install --downloadonly --downloaddir=/tmp <package-name>")])]),r("blockquote",[r("p",[e._v("运行时出现"),r("code",[e._v("Command line error:no such option:--downloadonly")]),e._v(",执行下边安装命令")])]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("yum install yum-plugin-downloadonly\n")])]),r("p",[e._v("linux批量安装某个目录下的rpm包\nrpm -ivh *.rpm --force --nodeps")]),r("h2",{attrs:{id:"gitlab-搭建"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#gitlab-搭建","aria-hidden":"true"}},[e._v("#")]),e._v(" gitlab 搭建")]),r("h3",{attrs:{id:"gitlab-email"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#gitlab-email","aria-hidden":"true"}},[e._v("#")]),e._v(" gitlab-email")]),r("p",[e._v("通过命令行测试邮件是否发送成功")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("gitlab-rails console\n\nirb(main):003:0> Notify.test_email('jguo@njsecnet.com', 'Message Subject', 'Message Body').deliver_now\n")])]),r("h3",{attrs:{id:"gitlab-pages"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#gitlab-pages","aria-hidden":"true"}},[e._v("#")]),e._v(" gitlab-pages")]),r("blockquote",[r("p",[e._v("需安装gitlab-runner")])]),r("h4",{attrs:{id:"相关文章"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#相关文章","aria-hidden":"true"}},[e._v("#")]),e._v(" 相关文章")]),r("p",[r("a",{attrs:{href:"https://www.jianshu.com/p/df433633816b",target:"_blank",rel:"noopener noreferrer"}},[e._v("gitlab之gitlab-ci自动部署")])]),r("h4",{attrs:{id:"安装"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#安装","aria-hidden":"true"}},[e._v("#")]),e._v(" 安装")]),r("p",[r("a",{attrs:{href:"http://www.daxiblog.com/2018/05/17/%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BA%E7%9A%84gitlab%E4%B8%AD%E5%BC%80%E5%90%AFpages%E5%8A%9F%E8%83%BD%EF%BC%8C%E4%B8%8D%E9%9C%80%E8%A6%81%E5%9F%9F%E5%90%8D%E4%B9%9F%E5%8F%AF%E4%BB%A5/",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://www.daxiblog.com/2018/05/17/%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BA%E7%9A%84gitlab%E4%B8%AD%E5%BC%80%E5%90%AFpages%E5%8A%9F%E8%83%BD%EF%BC%8C%E4%B8%8D%E9%9C%80%E8%A6%81%E5%9F%9F%E5%90%8D%E4%B9%9F%E5%8F%AF%E4%BB%A5/")])]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("# gitlab-runner status 查看服务运行状态 \n")])]),r("p",[e._v("gitlab-runner register 交互式注册一个runner")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("Running in system-mode.\n\nPlease enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/ci):\nhttp://192.168.1.2/ci   // 在这里输入gitlab安装的服务器ip/ci 即可\nPlease enter the gitlab-ci token for this runner:\neaYyokc57xxZbzAsoshT    // 这里的token可通过Gitlab上的项目Runners选项查看，在下面贴一张截图\nPlease enter the gitlab-ci description for this runner:\n[E5]: spring-demo       // 这里填写一个描述信息，不太重要，看着填吧\nPlease enter the gitlab-ci tags for this runner (comma separated):\ndemo                    // 在这里填写tag信息，多个tag可通过逗号,分割。\nRegistering runner... succeeded                     runner=eaYyokc5\nPlease enter the executor: docker, docker-ssh, parallels, shell, ssh, virtualbox, docker+machine, docker-ssh+machine:\nshell                   // 在这里需要输入runner的执行方式，因为我的Gitlab和runner是安装在同一台服务器上的，直接输入shell\nRunner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded!\n// 出现这样信息表示服务端的配置就已经成功结束了，如果需要使用到自动构建，还需要再添加一个配置文件，下面说说这个。\n")])]),r("h4",{attrs:{id:"gitlab-pages-yml配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#gitlab-pages-yml配置","aria-hidden":"true"}},[e._v("#")]),e._v(" gitlab-pages yml配置")]),r("p",[r("a",{attrs:{href:"https://docs.gitlab.com.cn/ce/ci/yaml/README.html#tags",target:"_blank",rel:"noopener noreferrer"}},[e._v("Configuration of your jobs with .gitlab-ci.yml 配置构建任务")])]),r("p",[e._v("除此方式外，还可以在runner注册时候将runner选为可以运行没有任何标签的作业 这一项。同样可以解决问题，只不过这种方式在托管的代码环境复杂的时候就不能随性的设置多种runner环境了。")]),r("h4",{attrs:{id:"gitlab-pages-tag的重要性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#gitlab-pages-tag的重要性","aria-hidden":"true"}},[e._v("#")]),e._v(" gitlab-pages tag的重要性")]),r("p",[r("a",{attrs:{href:"https://www.jianshu.com/p/394c6c8d205c",target:"_blank",rel:"noopener noreferrer"}},[e._v("在注册runner的时候输入的tag有什么用")])]),r("h2",{attrs:{id:"awk"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#awk","aria-hidden":"true"}},[e._v("#")]),e._v(" awk")]),r("pre",[r("code",[e._v("awk '{pattern + action}' {filenames}\n")])]),r("div",{staticClass:"warning custom-block"},[r("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),r("p",[e._v("pattern 表示 AWK 在数据中查找的内容\naction 是在找到匹配内容时所执行的一系列命令")])]),r("p",[e._v("awk语言的最基本功能是在文件或者字符串中基于指定规则浏览和抽取信息，awk抽取信息后，才能进行其他文本操作。完整的awk脚本通常用来格式化文本文件中的信息。")]),r("p",[e._v("通常，awk是以文件的一行为处理单位的。awk每接收文件的一行，然后执行相应的命令，来处理文本。")]),r("pre",[r("code",[e._v('// -F参数：指定分隔符，可指定一个或多个\n$ awk -F":" \'{ print $1 }\' /etc/passwd\n$ awk -F":" \'{ print $1 $3 }\' /etc/passwd\n$ awk -F":" \'{ print $1 " " $3 }\' /etc/passwd\n$ awk -F":" \'{ print "username: " $1 "\\t\\tuid:" $3" }\' /etc/passwd\n')])]),r("h2",{attrs:{id:"centos"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#centos","aria-hidden":"true"}},[e._v("#")]),e._v(" centOS")]),r("blockquote",[r("p",[e._v("rpm，Redhat Package Manager，即为红帽公司为RHEL开发的专用包管理器，后来更改为RPM Package Manager,类似于GNU项目，使用递归命名，GNU's Not Unix.")])]),r("h2",{attrs:{id:"查看是物理机还是虚拟机"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#查看是物理机还是虚拟机","aria-hidden":"true"}},[e._v("#")]),e._v(" 查看是物理机还是虚拟机")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("dmidecode -s system-product-name\nlshw -class system\nlshw -class system\n")])]),r("h2",{attrs:{id:"cpu，内存，磁盘信息"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cpu，内存，磁盘信息","aria-hidden":"true"}},[e._v("#")]),e._v(" cpu，内存，磁盘信息")]),r("h3",{attrs:{id:"服务器型号"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#服务器型号","aria-hidden":"true"}},[e._v("#")]),e._v(" 服务器型号")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('dmidecode | grep "Product Name"\ndmidecode -s system-product-name\n')])]),r("h3",{attrs:{id:"操作系统"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#操作系统","aria-hidden":"true"}},[e._v("#")]),e._v(" 操作系统")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("uname -a 查看操作系统内核信息\n")])]),r("h3",{attrs:{id:"cpu信息"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cpu信息","aria-hidden":"true"}},[e._v("#")]),e._v(" cpu信息")]),r("p",[e._v(":::success\n总核数 = 物理CPU个数 X 每颗物理CPU的核数\n总逻辑CPU数 = 物理CPU个数 X 每颗物理CPU的核数 X 超线程数\n:::")]),r("p",[e._v("查看物理CPU个数")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l\n')])]),r("p",[e._v("查看每个物理CPU中core的个数(即核数)")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('cat /proc/cpuinfo| grep "cpu cores"| uniq\n')])]),r("p",[e._v("查看逻辑cpu个数")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('cat /proc/cpuinfo| grep "processor"| wc -l\n')])]),r("p",[e._v("查看CPU信息（型号）")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c\n")])]),r("p",[e._v(".查看CPU运行位数")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("getconf LONG_BIT\n")])]),r("h3",{attrs:{id:"内存信息"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#内存信息","aria-hidden":"true"}},[e._v("#")]),e._v(" 内存信息")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('cat /proc/meminfo\nfree\n\ndmidecode|grep -P -A5 "Memory\\s+Device" | grep Size |grep -v Range | cat -n // 查看内存的插槽数,已经使用多少插槽.每条内存多大\n')])]),r("h4",{attrs:{id:"查看linux进程内存占用情况"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#查看linux进程内存占用情况","aria-hidden":"true"}},[e._v("#")]),e._v(" 查看LINUX进程内存占用情况")]),r("ul",[r("li",[r("p",[e._v("top")]),r("p",[e._v("top命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于Windows的"),r("strong",[e._v("任务管理器")]),e._v("，可以直接使用top命令后，查看%MEM的内容。")])])]),r("p",[e._v("内容解释：")]),r("pre",[r("code",[e._v("PID：进程的ID\n")])]),r("p",[e._v("USER：进程所有者\n　　PR：进程的优先级别，越小越优先被执行\n　　NInice：值\n　　VIRT：进程占用的虚拟内存\n　　RES：进程占用的物理内存\n　　SHR：进程使用的共享内存\n　　S：进程的状态。S表示休眠，R表示正在运行，Z表示僵死状态，N表示该进程优先值为负数\n　　%CPU：进程占用CPU的使用率\n　　%MEM：进程使用的物理内存和总内存的百分比\n　　TIME+：该进程启动后占用的总的CPU时间，即占用CPU使用时间的累加值。\n　　COMMAND：进程启动命令名称")]),r("p",[e._v("常用的命令：")]),r("pre",[r("code",[e._v("P：按%CPU使用率排行\n")])]),r("p",[e._v("T：按MITE+排行\n　　M：按%MEM排行")]),r("p",[e._v("还可以查看进程的status文件： cat /proc/2913/status")]),r("h3",{attrs:{id:"磁盘信息"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#磁盘信息","aria-hidden":"true"}},[e._v("#")]),e._v(" 磁盘信息")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("1）fdisk -l\n2）iostat -x 10    查看磁盘IO的性能\n3) df -h 无法看到未格式化挂载的数据盘\n\ndf -h linux系统以磁盘分区为单位查看文件系统，可以加上参数查看磁盘剩余空间信息\n\nDf命令是linux系统以磁盘分区为单位查看文件系统，可以加上参数查看磁盘剩余空间信息，命令格式：\n\ndf -hl 查看磁盘剩余空间\n \ndf -h 查看每个根路径的分区大小\n \ndu -sh [目录名] 返回该目录的大小\n \ndu -sm [文件夹] 返回该文件夹总M数\n \ndu -h [目录名] 查看指定文件夹下的所有文件大小（包含子文件夹）\n\n查看硬盘的分区 #sudo fdisk -l\n\n查看IDE硬盘信息 #sudo hdparm -i /dev/hda\n\n查看STAT硬盘信息 #sudo hdparm -I /dev/sda 或 #sudo apt-get install blktool #sudo blktool /dev/sda id\n\n查看硬盘剩余空间 #df -h #df -H\n\n查看目录占用空间 #du -hs 目录名\n\n优盘没法卸载 #sync fuser -km /media/usbdisk\n\n")])]),r("h3",{attrs:{id:"格式化分区-挂载"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#格式化分区-挂载","aria-hidden":"true"}},[e._v("#")]),e._v(" 格式化分区-挂载")]),r("p",[r("code",[e._v("fdisk -S 56 /dev/xvdb")]),e._v(" 对数据盘进行分区\n"),r("code",[e._v("fdisk")]),e._v(" 查看有哪些数据盘\n"),r("code",[e._v("mkfs.ext4 /dev/xvdb1")]),e._v(" 对新分区进行格式化，格式化的时间根据硬盘大小有所不同\n"),r("code",[e._v("echo '/dev/xvdb1 /www ext3 defaults 0 0' >> /etc/fstab'")]),e._v(" 添加分区信息\n"),r("code",[e._v("cat /etc/fstab")]),e._v(" 命令查看\n"),r("code",[e._v("mount -a")]),e._v("命令挂载新分区\n"),r("code",[e._v("df -h")]),e._v("命令查看，可以开始使用新的分区了")]),r("h4",{attrs:{id:"parted分区和挂载具体步骤"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#parted分区和挂载具体步骤","aria-hidden":"true"}},[e._v("#")]),e._v(" parted分区和挂载具体步骤")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("1，将磁盘上原有的分区删除掉：\n\n    进入：#parted   /dev/sdb\n\n    查看：（parted）p\n\n    删除：（parted）rm  1\n\n              （parted）rm  2\n\n 2,将磁盘格式变成gpt的格式（因为parted只能针对gpt格式的磁盘进行操作）\n\n   转换：（parted） mklabel  gpt\n\n   分区：（parted） mkpart  primary  1  500                  （分第一个主分区500MB）\n\n   分区：（parted） mkpart  primary  501  1000              (分第二个主分区500MB)\n\n   分区：（parted） mkpart  logical  1001  2000              (分第三个逻辑分区1000MB)  （parted的逻辑分区不用先分扩展分区，直接一步到位）\n\n   查看：（parted） p\n\n   退出：（parted）quit             ( parted分区自动保存，不用手动保存 )\n\n3，格式化已经分好的区\n\n   # mkfs -t ext4 /dev/sdb1\n\n4，挂载\n\n  # mount  /dev/sdb1 /mnt\n\n5,开机自动挂载：\n\n # echo  “/dev/sdb1 /mnt ext4 defaults 0 0”  >>/etc/fstab\n")])]),r("h4",{attrs:{id:"分区挂载相关文档"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分区挂载相关文档","aria-hidden":"true"}},[e._v("#")]),e._v(" 分区挂载相关文档")]),r("p",[r("a",{attrs:{href:"https://blog.csdn.net/duyiwuer2009/article/details/8644753/",target:"_blank",rel:"noopener noreferrer"}},[e._v("/etc/fstab 参数详解及如何设置开机自动挂载")]),r("a",{attrs:{href:"https://blog.csdn.net/hunanchenxingyu/article/details/47160261",target:"_blank",rel:"noopener noreferrer"}},[e._v("parted分区介绍")]),r("a",{attrs:{href:"https://blog.csdn.net/wst878882582/article/details/77581492",target:"_blank",rel:"noopener noreferrer"}},[e._v("使用parted磁盘分区及挂载")])]),r("p",[r("a",{attrs:{href:"https://www.cnblogs.com/Life-Record/p/5900252.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("使用fdisk分区1")]),r("a",{attrs:{href:"http://blog.51cto.com/sandshell/2119523",target:"_blank",rel:"noopener noreferrer"}},[e._v("Linux下使用fdisk扩大分区容量")])]),r("h4",{attrs:{id:"执行umount-的时候却提示-device-is-busy-的处理方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#执行umount-的时候却提示-device-is-busy-的处理方法","aria-hidden":"true"}},[e._v("#")]),e._v(" 执行umount 的时候却提示:device is busy 的处理方法")]),r("p",[r("a",{attrs:{href:"https://www.cnblogs.com/xuey/p/7878529.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("执行umount 的时候却提示:device is busy 的处理方法")])]),r("h3",{attrs:{id:"网卡信息"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#网卡信息","aria-hidden":"true"}},[e._v("#")]),e._v(" 网卡信息")]),r("p",[e._v("ifconfig\nethtool eth0 --\x3e speed")]),r("h2",{attrs:{id:"判断linux是32位还是64位"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#判断linux是32位还是64位","aria-hidden":"true"}},[e._v("#")]),e._v(" 判断linux是32位还是64位")]),r("ol",[r("li",[e._v("lshw -class system")]),r("li",[e._v("uname -a // 如果是64位机器，会输出x86_64")]),r("li",[e._v("file /sbin/init 或者 file /bin/ls")])]),r("h2",{attrs:{id:"查看当前登录用户"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#查看当前登录用户","aria-hidden":"true"}},[e._v("#")]),e._v(" 查看当前登录用户")]),r("ol",[r("li",[e._v("w 命令查看当前用户的")]),r("li",[e._v("who 命令查看主机上的用户")]),r("li",[e._v("whoami 查看当前登录用户是谁")]),r("li",[e._v("lastlog 查看主机上的用户 ep: lastlog | head -n 15")]),r("li",[e._v("$su - 切换到root用户")])]),r("h2",{attrs:{id:"ssh免密登录"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#ssh免密登录","aria-hidden":"true"}},[e._v("#")]),e._v(" ssh免密登录")]),r("ol",[r("li",[e._v("ssh-keygen -t rsa")]),r("li",[e._v("ssh-copy-id -i id_rsa.pub root@47.98.238.135")]),r("li",[e._v("登录服务器，查看authorized_keys")])]),r("h2",{attrs:{id:"环境变量"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#环境变量","aria-hidden":"true"}},[e._v("#")]),e._v(" 环境变量")]),r("h3",{attrs:{id:"常用环境变量"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#常用环境变量","aria-hidden":"true"}},[e._v("#")]),e._v(" 常用环境变量")]),r("p",[e._v("PATH 决定了shell将到哪些目录中寻找命令或程序")]),r("p",[e._v("HOME 当前用户主目录")]),r("p",[e._v("HISTSIZE　历史记录数")]),r("p",[e._v("LOGNAME 当前用户的登录名")]),r("p",[e._v("HOSTNAME　指主机的名称")]),r("p",[e._v("SHELL 当前用户Shell类型")]),r("p",[e._v("LANGUGE 　语言相关的环境变量，多语言可以修改此环境变量")]),r("p",[e._v("MAIL　当前用户的邮件存放目录")]),r("p",[e._v("PS1　基本提示符，对于root用户是#，对于普通用户是$")]),r("h3",{attrs:{id:"查看"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#查看","aria-hidden":"true"}},[e._v("#")]),e._v(" 查看")]),r("p",[e._v("echo 查看单个环境变量。例如：")]),r("pre",[r("code",[e._v("echo $PATH\n")])]),r("p",[e._v("env 查看所有环境变量。例如：")]),r("p",[e._v("env")]),r("p",[e._v("set 查看所有本地定义的环境变量。")]),r("p",[e._v("unset 可以删除指定的环境变量。")]),r("p",[r("code",[e._v("/bin")]),e._v("、"),r("code",[e._v("/sbin")]),e._v("、"),r("code",[e._v("/usr/bin")]),e._v("、"),r("code",[e._v("/usr/sbin")]),e._v("、"),r("code",[e._v("/usr/local/bin")]),e._v("等路径已经在系统环境变量中了，如果可执行文件在这几个标准位置，在终端命令行输入该软件可执行文件的文件名和参数(如果需要参数)，回车即可。")]),r("p",[e._v("如果不在标准位置，文件名前面需要加上完整的路径。不过每次都这样跑就太麻烦了，一个“一劳永逸”的办法是把这个路径加入环境变量。命令 “PATH=$PATH:路径”可以把这个路径加入环境变量，但是退出这个命令行就失效了。要想永久生效，需要把这行添加到环境变量文件里。有两个文件可 选：“/etc/profile”和用户主目录下的“.bash_profile”，“/etc/profile”对系统里所有用户都有效，用户主目录下 的“.bash_profile”只对这个用户有效。")]),r("p",[e._v("“PATH=$PATH:路径1:路径2:...:路径n”，意思是可执行文件的路径包括原先设定的路径，也包括从“路径1”到“路径n”的所 有路径。当用户输入一个一串字符并按回车后，shell会依次在这些路径里找对应的可执行文件并交给系统核心执行。那个“$PATH”表示原先设定的路径 仍然有效，注意不要漏掉。某些软件可能还有“PATH”以外类型的环境变量需要添加，但方法与此相同，并且也需要注意“$”。")]),r("p",[e._v("注意，与DOS/Window不同，UNIX类系统环境变量中路径名用冒号分隔，不是分号。另外，软件越装越多，环境变量越添越多，为了避免造成混乱，建议所有语句都添加在文件结尾，按软件的安装顺序添加。")]),r("p",[e._v("1.直接使用"),r("code",[e._v("export")]),e._v("命令(退出这个命令行就失效)")]),r("pre",[r("code",[e._v("export PATH=$PATH:/opt/au1200_rm/build_tools/bin\n")])]),r("p",[e._v("查看是否设好，用"),r("code",[e._v("export")]),e._v("命令查看")]),r("p",[e._v("2.修改profile文件（对系统里的所有用户都有效，source后）")]),r("pre",[r("code",[e._v('# vi /etc/profile\nexport PATH="$PATH:/opt/au1200_rm/build_tools/bin"\n#source /etc/profile\n')])]),r("p",[e._v("3.修改.bashrc文件（用户主目录下的 "),r("code",[e._v(".bash")]),e._v("），当前用户")]),r("pre",[r("code",[e._v('# vi /root/.bashrc\nexport PATH="$PATH:/opt/au1200_rm/build_tools/bin"\n')])]),r("p",[e._v("后两种方法一般需要重新注销系统才能生效")]),r("h2",{attrs:{id:"source"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#source","aria-hidden":"true"}},[e._v("#")]),e._v(" source")]),r("blockquote",[r("p",[e._v("使Shell读入指定的Shell程序文件并依次执行文件中的所有语句, 通常用于重新执行刚修改的初始化文件，使之立即生效，而不必注销并重新登录。")])]),r("p",[e._v("source命令也称为“点命令”，也就是一个点符号（.）,是bash的内部命令。")]),r("p",[e._v("用法：")]),r("pre",[r("code",[e._v("source filename 或 . filename\n")])]),r("p",[e._v("和 "),r("code",[e._v("sh filename")]),e._v("的区别")]),r("p",[e._v("sh filename 重新建立一个子shell，在子shell中执行脚本里面的语句，该子shell继承父shell的环境变量，但子shell新建的、改变的变量不会被带回父shell，除非使用export。")]),r("p",[e._v("source filename：这个命令其实只是简单地读取脚本里面的语句依次在当前shell里面执行，没有建立新的子shell。那么脚本里面所有新建、改变变量的语句都会保存在当前shell里面。")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("1.新建一个test.sh脚本，内容为:A=1\n2.然后使其可执行chmod +x test.sh\n3.运行sh test.sh后，echo $A，显示为空，因为A=1并未传回给当前shell\n4.运行./test.sh后，也是一样的效果\n5.运行source test.sh 或者 . test.sh，然后echo $A，则会显示1，说明A=1的变量在当前shell中\n")])]),r("h2",{attrs:{id:"centos7-防火墙"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#centos7-防火墙","aria-hidden":"true"}},[e._v("#")]),e._v(" centOS7 防火墙")]),r("p",[e._v("centOS7的防火墙由iptables改成了firewall")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("firewall-cmd --zone=public --add-port=80/tcp --permanent\n\n--zone #作用域 \n\n--add-port=80/tcp #添加端口，格式为：端口/通讯协议 \n\n--permanent #永久生效\n\nsystemctl restart firewalld.service # 重启防火墙\nsystemctl stop firewalld.service # 关闭防火墙\nnetstat -lntp # 查看监听的端口\nnetstat -lnp|grep 8080 # 检查端口被哪个进程占用\n")])]),r("h2",{attrs:{id:"交互式与非交互式-登录与非登录"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#交互式与非交互式-登录与非登录","aria-hidden":"true"}},[e._v("#")]),e._v(" 交互式与非交互式 登录与非登录")]),r("p",[r("a",{attrs:{href:"https://blog.csdn.net/sch0120/article/details/70226903",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://blog.csdn.net/sch0120/article/details/70226903")])]),r("h2",{attrs:{id:"linux正则"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#linux正则","aria-hidden":"true"}},[e._v("#")]),e._v(" linux正则")]),r("p",[r("a",{attrs:{href:"http://blog.51cto.com/osrun/1345153",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://blog.51cto.com/osrun/1345153")])]),r("h2",{attrs:{id:"bash的startup"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#bash的startup","aria-hidden":"true"}},[e._v("#")]),e._v(" bash的startup")]),r("p",[e._v("startup文件分为"),r("code",[e._v("profile")]),e._v("和"),r("code",[e._v("rc")]),e._v("系列，功能相似但使用场景不同。")]),r("p",[e._v("简单来说，"),r("code",[e._v("登录shell")]),e._v("启动时会加载"),r("code",[e._v("profile")]),e._v("系列的startup文件，而"),r("code",[e._v("非登录shell")]),e._v("启动时会加载"),r("code",[e._v("rc")]),e._v("系列的startup文件，通过"),r("code",[e._v("--noprofile")]),e._v("选项可以阻止系统加载“profile”系列的startup文件。")]),r("h3",{attrs:{id:"交互式登录shell"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#交互式登录shell","aria-hidden":"true"}},[e._v("#")]),e._v(" 交互式登录shell")]),r("p",[e._v("登录过程：")]),r("ol",[r("li",[e._v("读取并执行/etc/profile文件；")]),r("li",[e._v("读取并执行~/.bash_profile文件；")])]),r("ul",[r("li",[e._v("若文件不存在，则读取并执行~/.bash_login文件；")]),r("li",[e._v("若文件不存在，则读取并执行~/.profile文件；")])]),r("p",[e._v("登出过程：")]),r("ol",[r("li",[e._v("读取并执行~/.bash_logout文件；")]),r("li",[e._v("读取并执行/etc/bash.bash_logout文件；")])]),r("h3",{attrs:{id:"非交互式登录shell"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#非交互式登录shell","aria-hidden":"true"}},[e._v("#")]),e._v(" 非交互式登录shell")]),r("p",[e._v("登陆过程：")]),r("ol",[r("li",[e._v("读取并执行/etc/profile文件；")]),r("li",[e._v("读取并执行~/.bash_profile文件；")])]),r("ul",[r("li",[e._v("若文件不存在，则读取并执行~/.bash_login文件；")]),r("li",[e._v("若文件不存在，则读取并执行~/.profile文件；")])]),r("div",{staticClass:"warning custom-block"},[r("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),r("p",[e._v("与“交互式登陆shell”相比，“非交互式登陆shell”并没有登出的过程")])]),r("h3",{attrs:{id:"rc系列执行场景"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rc系列执行场景","aria-hidden":"true"}},[e._v("#")]),e._v(" rc系列执行场景")]),r("blockquote",[r("p",[e._v("代表文件为 "),r("code",[e._v("~/.bashrc")]),e._v("，它用于"),r("code",[e._v("交互式非登录shell")]),e._v("的环境加载，通过"),r("code",[e._v("--norc")]),e._v("选项可以阻止系统加载“rc”系列的startup文件；通过"),r("code",[e._v("--rcfile")]),e._v("选项可以使用指定的文件替代系统默认的"),r("code",[e._v("~/.bashrc")]),e._v("文件。")])]),r("h4",{attrs:{id:"交互式非登陆shell"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#交互式非登陆shell","aria-hidden":"true"}},[e._v("#")]),e._v(" 交互式非登陆shell")]),r("p",[e._v("startup文件执行顺序")]),r("ol",[r("li",[e._v("读取并执行~/.bashrc或--rcfile选项指定的文件")])]),r("h3",{attrs:{id:"实际情况"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#实际情况","aria-hidden":"true"}},[e._v("#")]),e._v(" 实际情况")]),r("p",[e._v("startup文件之间还存在着默认的显式调用关系")]),r("ol",[r("li",[e._v("~/.bash_profile显式调用~/.bashrc文件；")]),r("li",[e._v("~/.bashrc显式调用/etc/bashrc文件；")])]),r("p",[e._v(":::success\n/etc/profile.d目录用于存放个性化配置脚本，你可以把自己需要的全局配置放入以.sh结尾的文件中，系统在执行/etc/profile和/etc/bashrc文件时，都会择机调用它们。这样做最大的好处是便于维护，而且相对更加安全。\n:::")]),r("h3",{attrs:{id:"总结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[e._v("#")]),e._v(" 总结")]),r("p",[r("a",{attrs:{href:"https://blog.csdn.net/sch0120/article/details/70256318",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://blog.csdn.net/sch0120/article/details/70256318")])]),r("h2",{attrs:{id:"不同linux之间copy文件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#不同linux之间copy文件","aria-hidden":"true"}},[e._v("#")]),e._v(" 不同linux之间copy文件")]),r("ol",[r("li",[e._v("其中一台Linux安装ftp Server，这样可以另外一台使用ftp的client程序来进行文件的copy")]),r("li",[e._v("采用samba服务，类似Windows文件copy 的方式来操作，比较简洁方便")]),r("li",[e._v("利用scp命令来进行文件复制，scp是有Security的文件copy，基于ssh登录")])]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("scp /home/daisy/full.tar.gz root@172.19.2.75:/home/root\n")])]),r("h2",{attrs:{id:"sz-rz"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#sz-rz","aria-hidden":"true"}},[e._v("#")]),e._v(" sz/rz")]),r("h3",{attrs:{id:"使用前提"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#使用前提","aria-hidden":"true"}},[e._v("#")]),e._v(" 使用前提")]),r("ul",[r("li",[e._v("Linux端（CentOS, Ubuntu）需要安装rz/sz命令，也就是 lszrz 包。")]),r("li",[e._v("windows端需要支持ZModem的telnet/ssh客户端(Xshell，SecureCRT支持,好像putty不支持)，SecureCRT就可以用SecureCRT登陆到Unix/Linux主机（telnet或ssh均可）")]),r("li",[e._v("运行命令rz，即是接收文件，xshell就会弹出文件选择对话框，选好文件之后关闭对话框，文件就会上传到linux里的当前目录。如果要上传文件，直接用鼠标点住文件往X-shell里面一拖即是")]),r("li",[e._v("运行命令 sz file 就是发文件到windows上（保存的目录是可以配置） 比ftp命令方便多了，而且服务器不用再开FTP服务了")])]),r("h3",{attrs:{id:"文件传输协议"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#文件传输协议","aria-hidden":"true"}},[e._v("#")]),e._v(" 文件传输协议")]),r("ul",[r("li",[e._v("ASCII：这是最快的传输协议，但只能传送文本文件。")]),r("li",[e._v("Xmodem：这种古老的传输协议速度较慢，但由于使用了CRC错误侦测方法，传输的准确率可高达99.6%。")]),r("li",[e._v("Ymodem：这是Xmodem的改良版，使用了1024位区段传送，速度比Xmodem要快")]),r("li",[e._v("Zmodem：Zmodem采用了串流式（streaming）传输方式，传输速度较快，而且还具有自动改变区段大小和断点续传、快速错误侦测等功能。这是"),r("code",[e._v("目前最流行的文件传输协议")]),e._v("。")])]),r("h3",{attrs:{id:"安装-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#安装-2","aria-hidden":"true"}},[e._v("#")]),e._v(" 安装")]),r("p",[e._v("单单是SSH客户端软件支持以上文件传输协议（ASCII,Xmodem，Ymodem,Zmodem）还不行，我们的Linux服务器上也得安装相应的软件，以支持这些文件传输协议才行。在Linux上，lrzsz就是完成此任务的,lrzsz就是一个支持 Zmodem 传输协议的工具。我们通过sz/rz两个命令，分别发送/接收文件。如果我们的系统中没有安装lrzsz这个包，就会报错，安装即可解决。")]),r("h4",{attrs:{id:"在线环境"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#在线环境","aria-hidden":"true"}},[e._v("#")]),e._v(" 在线环境")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("[root@localhost ~]# rz\n-bash: rz: command not found\n## For CentOS/RHEL\n[root@localhost ~]# yum -y install lrzsz\n \n## For Ubuntu\n# sudo apt-get install lrzsz\n")])]),r("h4",{attrs:{id:"离线环境"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#离线环境","aria-hidden":"true"}},[e._v("#")]),e._v(" 离线环境")]),r("ol",[r("li",[e._v("源码包下载路径")])]),r("p",[r("a",{attrs:{href:"http://www.ohse.de/uwe/releases/lrzsz-0.12.20.tar.gz",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://www.ohse.de/uwe/releases/lrzsz-0.12.20.tar.gz")])]),r("ol",{attrs:{start:"2"}},[r("li",[e._v("解压编译")]),r("li",[e._v("创建软链接")])]),r("p",[e._v("上面安装过程默认把lsz和lrz安装到了/usr/local/bin/目录下\n进入到/usr/local/bin/目录下：cd /usr/local/bin\n创建rz的软链接，并命名rz\n创建sz的软链接，并命名sz")]),r("pre",[r("code",[e._v("  ln -s /usr/local/bin/lrz rz\n  ln -s /usr/local/bin/lsz sz\n")])]),r("h3",{attrs:{id:"sz"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#sz","aria-hidden":"true"}},[e._v("#")]),e._v(" sz")]),r("p",[e._v("从服务器上下载文件")]),r("pre",[r("code",[e._v("sz filename\nsz filename1 filename2\nsz dir/*  // 下载dir目录下的所有文件，不包含dir下的文件夹\n")])]),r("h3",{attrs:{id:"rz"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rz","aria-hidden":"true"}},[e._v("#")]),e._v(" rz")]),r("p",[e._v("输入rz回车后，会出现文件选择对话框，选择需要上传文件，一次可以指定多个文件，上传到服务器的路径为当前执行rz命令的目录")]),r("h3",{attrs:{id:"缺点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#缺点","aria-hidden":"true"}},[e._v("#")]),e._v(" 缺点")]),r("ol",[r("li",[e._v("无法传输大于 4G 的文件。")]),r("li",[e._v("无法传输文件夹")])]),r("blockquote",[r("p",[e._v("使用ftp工具代替")])]),r("h2",{attrs:{id:"离线安装ruby-compass"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#离线安装ruby-compass","aria-hidden":"true"}},[e._v("#")]),e._v(" 离线安装ruby + compass")]),r("p",[e._v("ruby官方下载地址 "),r("a",{attrs:{href:"http://www.ruby-lang.org/en/downloads/",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://www.ruby-lang.org/en/downloads/")])]),r("p",[e._v("设置PATH路径")]),r("pre",[r("code",[e._v("// 把自己安装的ruby放在系统PATH前面，避免调用操作系统自带的ruby  \nexport PATH=/usr/local/ruby-1.9.1/bin:$PATH  \n")])]),r("p",[e._v("可以在 ~/.profile 文件中增加这样的代码")]),r("pre",[r("code",[e._v('if [ -d "/usr/local/ruby-1.9.1/bin" ] ; then  \n  PATH="/usr/local/ruby-1.9.1/bin:$PATH"  \nfi\n')])]),r("h3",{attrs:{id:"安装compass"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#安装compass","aria-hidden":"true"}},[e._v("#")]),e._v(" 安装compass")]),r("p",[e._v("先安装rubyGems")]),r("p",[e._v("地址： "),r("a",{attrs:{href:"https://rubygems.org/pages/download",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://rubygems.org/pages/download")])]),r("p",[e._v("解压后，执行命令")]),r("pre",[r("code",[e._v("ruby setup.rb \n")])]),r("p",[e._v("安装完成后")]),r("pre",[r("code",[e._v("gem -v\n")])]),r("p",[e._v("再去 "),r("a",{attrs:{href:"https://rubygems.org/gems/compass/versions/1.1.0.alpha.3",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://rubygems.org/gems/compass/versions/1.1.0.alpha.3 ")]),e._v(" 上面下载compass以及相关的依赖包gem文件，所有文件下载下来之后，新建一个文件目录gem，然后将所有gem文件放到这个目录下")]),r("p",[e._v("进入gem文件夹，执行安装compass命令")]),r("pre",[r("code",[e._v("gem install --local compass-1.0.3.gem\n")])]),r("p",[e._v("如果安装不成功，应该是缺少依赖包，自己再去 "),r("a",{attrs:{href:"https://rubygems.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://rubygems.org")]),e._v(" 上面下就可以了，安装成功之后，在命令中输入")]),r("pre",[r("code",[e._v("compass -v\n")])]),r("h2",{attrs:{id:"wget"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#wget","aria-hidden":"true"}},[e._v("#")]),e._v(" wget")]),r("p",[r("a",{attrs:{href:"https://www.imooc.com/article/17781?block_id=tuijian_wz",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.imooc.com/article/17781?block_id=tuijian_wz")])]),r("h3",{attrs:{id:"使用指南"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#使用指南","aria-hidden":"true"}},[e._v("#")]),e._v(" 使用指南")]),r("p",[e._v("CentOS wget是一个从网络上自动下载文件的自由工具。它支持HTTP，HTTPS和FTP协议，可以使用HTTP代理. 所谓的自动下载是指，CentOS wget可以在用户退出系统的之后在后台执行。这意味这你可以登录系统，启动一个CentOS wget下载任务，然后退出系统，CentOS wget将在后台执行直到任务完成，相对于其它大部分浏览器在下载大量数据时需要用户一直的参与，这省去了极大的麻烦。")]),r("p",[e._v('wget可以跟踪HTML页面上的链接依次下载来创建远程服务器的本地版本，完全重建原始站点的目录结构。这又常被称作"递归下载"。在递归下载的时候，wget遵循Robot Exclusion标准(/robots.txt). wget可以在下载的同时，将链接转换成指向本地文件，以方便离线浏览。')]),r("p",[e._v("wget非常稳定,它在带宽很窄的情况下和不稳定网络中有很强的适应性.如果是由于网络的原因下载失败，wget会不断的尝试，直到整个文件下载完毕。如果是服务器打断下载过程，它会再次联到服务器上从停止的地方继续下载。这对从那些限定了链接时间的服务器上下载大文件非常有用。")]),r("h3",{attrs:{id:"使用技巧"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#使用技巧","aria-hidden":"true"}},[e._v("#")]),e._v(" 使用技巧")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("wget -r -np -nd http://example.com/packages/ \n这条命令可以下载 http://example.com 网站上 packages 目录中的所有文件。其中，-np 的作用是不遍历父目录，-nd 表示不在本机重新创建目录结构\n\nwget-r -np -nd --accept=iso http://example.com/centos-5/i386/ 与上一条命令相似，但多加了一个 --accept=iso 选项，这指示CentOS wget仅下载 i386 目录中所有扩展名为 iso 的文件。你也可以指定多个扩展名，只需用逗号分隔即可。\n\nwget -i filename.txt 此命令常用于批量下载的情形，把所有需要下载文件的地址放到 filename.txt 中，然后 CentOS wget 就会自动为你下载所有文件了。\n\nwget -c http://example.com/really-big-file.iso 这里所指定的 -c 选项的作用为断点续传。\n\nwget -m -k (-H) http://www.example.com/ 该命令可用来镜像一个网站，CentOS wget将对链接进行转换。如果网站中的图像是放在另外的站点，那么可以使用 -H 选项。\n")])]),r("h3",{attrs:{id:"常见用法-站点镜像"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#常见用法-站点镜像","aria-hidden":"true"}},[e._v("#")]),e._v(" 常见用法-站点镜像")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("Usage: wget [OPTION]... [URL]... \n\n用wget做站点镜像: \n\nwget -r -p -np -k http://dsec.pku.edu.cn/~usr_name/# \n或者\nwget -m http://www.tldp.org/LDP/abs/html/\n\n在不稳定的网络上下载一个部分下载的文件，以及在空闲时段下载:\n\nwget -t 0 -w 31 -c http://dsec.pku.edu.cn/BBC.avi -o down.log \n或者\n从filelist读入要下载的文件列表 wget -t 0 -w 31 -c -B ftp://dsec.pku.edu.cn/linuxsoft -i filelist.txt -o down.log \n\n上面的代码还可以用来在网络比较空闲的时段进行下载。我的用法是:在mozilla中将不方便当时下载的URL链接拷贝到内存中然后粘贴到文件filelist.txt中，在晚上要出去系统前执行上面代码的第二条。 \n\n使用代理下载 wget -Y on -p -k https://sourceforge.net/projects/wvware/\n\n代理可以在环境变量或wgetrc文件中设定 \n\n# 在环境变量中设定代理export PROXY=http://211.90.168.94:8080/# \n\n在~/.wgetrc中设定代理 http_proxy = http://proxy.yoyodyne.com:18023/ \n\nftp_proxy = http://proxy.yoyodyne.com:18023/\n\n")])]),r("h3",{attrs:{id:"wget爬取全站"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#wget爬取全站","aria-hidden":"true"}},[e._v("#")]),e._v(" wget爬取全站")]),r("pre",[r("code",[e._v("wget --mirror -p --convert-links -P [本地目錄] [網站地址]  \n")])]),r("p",[e._v("--mirror：設置這個參數用來建立本地鏡像")]),r("p",[e._v("-p：下載所有HTML適合顯示的元素")]),r("p",[e._v("--convert-links：將所有鏈接轉為本地鏈接")]),r("p",[e._v("-P [本地目錄]：儲存文件到本地目錄下")]),r("p",[e._v("-m //镜像，就是整站抓取\n-e robots=off //忽略robots协议\n-k //将绝对URL链接转换为本地相对URL\n-E //将所有text/html文档以.html扩展名保存")]),r("h2",{attrs:{id:"tar-gz、tar、bz2、zip压缩、解压缩小结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#tar-gz、tar、bz2、zip压缩、解压缩小结","aria-hidden":"true"}},[e._v("#")]),e._v(" tar.gz、tar、bz2、zip压缩、解压缩小结")]),r("h3",{attrs:{id:"tar常用命令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#tar常用命令","aria-hidden":"true"}},[e._v("#")]),e._v(" tar常用命令")]),r("blockquote",[r("p",[e._v("tar只是用来打包")])]),r("pre",[r("code",[e._v("# tar -cf all.tar *.jpg       \n")])]),r("p",[e._v("将所有.jpg的文件打成一个名为all.tar的包。"),r("code",[e._v("-c")]),e._v("是表示产生"),r("code",[e._v("新")]),e._v("的包 ，"),r("code",[e._v("-f")]),e._v("指定包的文件名。")]),r("pre",[r("code",[e._v("# tar -rf all.tar *.gif       \n")])]),r("p",[e._v("将所有.gif的文件增加到all.tar的包里面去。"),r("code",[e._v("-r")]),e._v("是表示"),r("code",[e._v("增加文件")]),e._v("的意思。")]),r("pre",[r("code",[e._v("# tar -uf all.tar logo.gif\n")])]),r("p",[e._v("这条命令是更新原来tar包all.tar中logo.gif文件，-u是表示更新文件的意思。")]),r("pre",[r("code",[e._v("# tar -tf all.tar\n")])]),r("p",[e._v("列出all.tar包中所有文件，-t是列出文件的意思")]),r("pre",[r("code",[e._v("# tar -xf all.tar\n")])]),r("p",[e._v("解出all.tar包中所有文件，-x是解开的意思")]),r("h3",{attrs:{id:"gzip"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#gzip","aria-hidden":"true"}},[e._v("#")]),e._v(" gzip")]),r("blockquote",[r("p",[e._v("gzip是GNU组织开发的一个压缩程序，.gz结尾的文件就是gzip压缩的结果，与gzip 相对的解压程序是gunzip")]),r("blockquote",[r("p",[e._v("tar中使用-z这个参数来调用gzip")])])]),r("pre",[r("code",[e._v("# tar -czf all.tar.gz *.jpg\n")])]),r("p",[e._v("将所有.jpg的文件打成一个tar包，并且将其用gzip压缩，生成一个gzip压缩过的包，包名为all.tar.gz")]),r("pre",[r("code",[e._v("# tar -xzf all.tar.gz\n")])]),r("p",[e._v("这条命令是将上面产生的包解开")]),r("h3",{attrs:{id:"bzip"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#bzip","aria-hidden":"true"}},[e._v("#")]),e._v(" bzip")]),r("blockquote",[r("p",[e._v("bzip2是一个压缩能力更强的压缩程序，.bz2结尾的文件就是bzip2压缩的结果。与bzip2相对的解压程序是bunzip2")]),r("blockquote",[r("p",[e._v("tar中使用-j这个参数来调用gzip")])])]),r("pre",[r("code",[e._v("# tar -cjf all.tar.bz2 *.jpg\n")])]),r("p",[e._v("将所有.jpg的文件打成一个tar包，并且将其用bzip2压缩，生成一个bzip2压缩过的包，包名为all.tar.bz2")]),r("pre",[r("code",[e._v("# tar -xjf all.tar.bz2\n")])]),r("p",[e._v("将上面产生的包解开")]),r("h3",{attrs:{id:"压缩文件解压总结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#压缩文件解压总结","aria-hidden":"true"}},[e._v("#")]),e._v(" 压缩文件解压总结")]),r("ol",[r("li",[r("p",[e._v("对于.tar结尾的文件")]),r("p",[e._v("tar -xf all.tar")])]),r("li",[r("p",[e._v("对于.gz结尾的文件")]),r("p",[e._v("gzip -d all.gz")]),r("p",[e._v("gunzip all.gz")])]),r("li",[r("p",[e._v("对于.tgz或.tar.gz结尾的文件")]),r("p",[e._v("tar -xzf all.tar.gz\ntar -xzf all.tgz")])]),r("li",[r("p",[e._v("对于.bz2结尾的文件")]),r("p",[e._v("bzip2 -d all.bz2\nbunzip2 all.bz2")])]),r("li",[r("p",[e._v("对于tar.bz2结尾的文件")]),r("p",[e._v("tar -xjf all.tar.bz2")])]),r("li",[r("p",[e._v("对于.Z结尾的文件")]),r("p",[e._v("uncompress all.Z")])]),r("li",[r("p",[e._v("对于.tar.Z结尾的文件")]),r("p",[e._v("tar -xZf all.tar.z")])])]),r("h3",{attrs:{id:"对于zip和rar"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#对于zip和rar","aria-hidden":"true"}},[e._v("#")]),e._v(" 对于zip和rar")]),r("p",[e._v("linux下提供了zip和unzip程序，zip是压缩程序，unzip是解压程序。它们的参数选项很多，这里只做简单介绍")]),r("p",[r("a",{attrs:{href:"http://www.cnblogs.com/cxhfuujust/p/8193310.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://www.cnblogs.com/cxhfuujust/p/8193310.html")])]),r("pre",[r("code",[e._v("# zip all.zip *.jpg\n# unzip all.zip\n")])]),r("p",[e._v("要在linux下处理.rar文件，需要安装RAR for Linux，可以从网上下载，但要记住，RAR for Linux 不是免费的；可从"),r("a",{attrs:{href:"http://www.rarsoft.com/download.htm",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://www.rarsoft.com/download.htm")]),e._v("下载RARfor Linux 3.2.")]),r("p",[e._v("然后安装")]),r("pre",[r("code",[e._v("# tar -xzpvf rarlinux-3.2.0.tar.gz \n# cd rar \n# make\n\n# rar a all *.jpg\n")])]),r("p",[e._v("这条命令是将所有.jpg的文件压缩成一个rar包，名为all.rar，该程序会将.rar 扩展名将自动附加到包名后。")]),r("pre",[r("code",[e._v("# unrar e all.rar\ne      Extract files to current directory.\nl      List archive content.\np      Print file to stdout.\nt      Test archive files.\nv      Verbosely list archive.\nx      Extract files with full path.\n")])]),r("p",[e._v("注意参数 e 和参数 x 的区别：")]),r("p",[e._v("e：将所有的文件提取到当前目录；\nx：保留压缩文件的完整路径信息；")]),r("p",[r("a",{attrs:{href:"http://blog.51cto.com/lan2003/770497",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://blog.51cto.com/lan2003/770497")])]),r("h2",{attrs:{id:"copy-文件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#copy-文件","aria-hidden":"true"}},[e._v("#")]),e._v(" copy 文件")]),r("ol",[r("li",[e._v("第一种就是ftp，也就是其中一台Linux安装ftp Server，这样可以另外一台使用ftp的client程序来进行文件的copy。")])]),r("h2",{attrs:{id:"package-json-package-lock-json"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#package-json-package-lock-json","aria-hidden":"true"}},[e._v("#")]),e._v(" package.json && package-lock.json")]),r("h2",{attrs:{id:"require-important"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#require-important","aria-hidden":"true"}},[e._v("#")]),e._v(" require important")]),r("h2",{attrs:{id:"虚拟dom"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#虚拟dom","aria-hidden":"true"}},[e._v("#")]),e._v(" 虚拟dom")]),r("h2",{attrs:{id:"基于samba在window下映射linux磁盘驱动器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基于samba在window下映射linux磁盘驱动器","aria-hidden":"true"}},[e._v("#")]),e._v(" 基于samba在window下映射linux磁盘驱动器")]),r("blockquote",[r("p",[e._v("windows的文件共享功能是通过samba协议完成的，windows系统一般都默认开了samba服务，linux就需要自己手动安装了。")])]),r("h3",{attrs:{id:"samba"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#samba","aria-hidden":"true"}},[e._v("#")]),e._v(" samba")]),r("pre",[r("code",[e._v("是在Linux和UNIX系统上实现SMB协议的一个免费软件，由服务器及客户端程序构成。SMB（Server Messages Block，信息服务块）是一种在局域网上共享文件和打印机的一种通信协议，它为局域网内的不同计算机之间提供文件及打印机等资源的共享服务。SMB协议是客户机/服务器型协议，客户机通过该协议可以访问服务器上的共享文件系统、打印机及其他资源。通过设置“NetBIOS over TCP/IP”使得Samba不但能与局域网络主机分享资源，还能与全世界的电脑分享资源。\n")])]),r("p",[e._v("Samba最大的功能就是可以用于Linux与windows系统直接的文件共享和打印共享，Samba既可以用于windows与Linux之间的文件共享，也可以用于Linux与Linux之间的资源共享。")]),r("h3",{attrs:{id:"在线安装"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#在线安装","aria-hidden":"true"}},[e._v("#")]),e._v(" 在线安装")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("[root@VMredhat6 ~]# yum -y install samba*                    #yum在线安装samba\n\n[root@VMredhat6 ~]# rpm -qa | grep samba                    #检查samba安装情况\n\nsamba-client-3.6.23-41.el6.x86_64\n\nsamba-winbind-clients-3.6.23-41.el6.x86_64\n\nsamba-3.6.23-41.el6.x86_64\n\nsamba4-libs-4.0.0-58.el6.rc4.x86_64\n\nsamba-common-3.6.23-41.el6.x86_64\n\nsamba-winbind-3.6.23-41.el6.x86_64\n")])]),r("h3",{attrs:{id:"关闭防火墙"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#关闭防火墙","aria-hidden":"true"}},[e._v("#")]),e._v(" 关闭防火墙")]),r("p",[e._v("Samab服务开启之前需要关闭两个服务")]),r("ul",[r("li",[e._v("iptables防火墙（如果你熟悉可以不关闭，放行smb的端口即可，SAMBA服务TCP端口139,445  UDP端口 137,138）；")]),r("li",[e._v("selinux服务。")])]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("# 关闭防火墙：\n[root@VMredhat6 ~] /etc/init.d/iptables stop    #关闭防火墙\n\n[root@VMredhat6 ~] chkconfig --list iptables    #查看防火墙启动状态\n\n[root@VMredhat6 ~] chkconfig iptables off   #关闭防火墙开机自动启动\n\n# 关闭selinux：\n[root@VMredhat6 ~] vim /etc/selinux/config  #永久关闭selinux\n\nset SELINUX=disabled    #SELINUX=enforcing改为SELINUX=disabled\n")])]),r("h3",{attrs:{id:"创建samba账号"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#创建samba账号","aria-hidden":"true"}},[e._v("#")]),e._v(" 创建samba账号")]),r("h3",{attrs:{id:"配置文件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#配置文件","aria-hidden":"true"}},[e._v("#")]),e._v(" 配置文件")]),r("p",[e._v("vi /etc/samba/smb.conf")]),r("p",[r("a",{attrs:{href:"https://www.cnblogs.com/zoulongbin/p/7216246.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.cnblogs.com/zoulongbin/p/7216246.html")]),r("a",{attrs:{href:"http://blog.51cto.com/yuanbin/115761",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://blog.51cto.com/yuanbin/115761")])]),r("h2",{attrs:{id:"查找安装路径"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#查找安装路径","aria-hidden":"true"}},[e._v("#")]),e._v(" 查找安装路径")]),r("ol",[r("li",[e._v("find /|grep nginx.conf")])]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("/etc/nginx/conf.d\n/etc/nginx/conf.d/example_ssl.conf\n/etc/nginx/conf.d/default.conf\n/etc/nginx/nginx.conf\n")])]),r("ol",{attrs:{start:"2"}},[r("li",[e._v("netstat -tnlp|grep nginx")])]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN 21196/nginx: master\n然后看到一行记录，复制最后的一个数据（进程ID）\nps -aux |grep 进程ID\n就可以看到nginx的启动方式了。\n[root@localhost ~]# ps -aux |grep 21196\nroot 21196 0.0 0.0 48044 924 ? Ss 23:40 0:00 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.conf\nroot 21204 0.0 0.2 112648 2320 pts/0 S+ 23:45 0:00 grep --color=auto 21196\n")])]),r("h2",{attrs:{id:"yum-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#yum-2","aria-hidden":"true"}},[e._v("#")]),e._v(" yum")]),r("p",[e._v("YUM（全称为 Yellow dog Updater, Modified）是一个在Fedora和RedHat以及CentOS中的Shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包，避免了手动安装的麻烦(寻找资源、下载；放到指定目录安装；处理依赖关系并下载依赖关系的包进行安装)。所以用yum安装，实质上是用RPM安装，所以RPM查询信息的指令都可用。")]),r("p",[e._v("一般来说，RPM默认安装路径如下：")]),r("p",[r("img",{attrs:{src:a(196),alt:"rpm安装路径"}})]),r("p",[e._v("rpm有两个参数-l和-c可以帮助我们查看具体的安装路径。")]),r("ul",[r("li",[e._v("-l 显示软件包中的文件列表")]),r("li",[e._v("-c 显示配置文件列表")])]),r("p",[e._v("那么我们可以使用“rpm -ql  包名”来查看具体的安装路径。")]),r("h3",{attrs:{id:"rpm命令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rpm命令","aria-hidden":"true"}},[e._v("#")]),e._v(" rpm命令")]),r("p",[r("a",{attrs:{href:"http://man.linuxde.net/rpm",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://man.linuxde.net/rpm")])]),r("h2",{attrs:{id:"linux上传下载文件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#linux上传下载文件","aria-hidden":"true"}},[e._v("#")]),e._v(" linux上传下载文件")]),r("h3",{attrs:{id:"scp"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#scp","aria-hidden":"true"}},[e._v("#")]),e._v(" scp")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("# linux\nscp /home/work/source.txt work@192.168.0.10:/home/work/   #把本地的source.txt文件拷贝到192.168.0.10机器上的/home/work目录下\n\nscp work@192.168.0.10:/home/work/source.txt /home/work/   #把192.168.0.10机器上的source.txt文件拷贝到本地的/home/work目录下\n\nscp work@192.168.0.10:/home/work/source.txt work@192.168.0.11:/home/work/   #把192.168.0.10机器上的source.txt文件拷贝到192.168.0.11机器的/home/work目录下\n\nscp -r /home/work/sourcedir work@192.168.0.10:/home/work/   #拷贝文件夹，加-r参数\n\n# windows\n\nscp administrator@10.20.42.75:/e:/2017/filenameFrom.txt   /home/gec/filenameTo.txt   #从Windows本地上传文件到Linux服务器。上传后文件名可直接重命名。  \nscp /home/gec/fileFrom.txt  administrator@10.20.42.75:/e:/2017/fileTo.txt              #从Linux服务器下载文件到Windows本地。下载后文件名可直接重命名。  \nscp -r  administrator@10.20.42.75:/e:/2017/dirFrom    /home/gec/dirTo      #从Windows本地上传一个目录（递归上传目录内的所有文件）到Linux服务器。上传后可直接重命名目录名。  \nscp -r  /home/gec/DirFrom    administrator@10.20.42.75:/e:/2017/           #从Linux服务器下载一个目录（递归下载目录内的所有文件）到Windows本地。试过了下载后的目录名不能直接在这里重命名。 \n\n在scp命令后面接上参数-o GSSAPIAuthentication=no 解决scp连接缓慢问题\n")])]),r("h2",{attrs:{id:"安装nginx"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#安装nginx","aria-hidden":"true"}},[e._v("#")]),e._v(" 安装nginx")]),r("ol",[r("li",[r("p",[e._v("Ubuntu(debian)\n直接apt-get install nginx")])]),r("li",[r("p",[e._v("centOS")])])]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("centos7系统库中默认是没有nginx的rpm包的，所以我们自己需要先更新下rpm依赖库\n(1)使用yum安装nginx需要包括Nginx的库，安装Nginx的库\nrpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm\n\nrpm包的安装：\n1.安装一个包\n# rpm -ivh\n2.升级一个包，没安装过的不能使用升级命令\n# rpm -Uvh\n3.移走一个包\n# rpm -e\n\n安装准备依赖lib库\nyum install gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel\n\n(2)使用下面命令安装nginx\n#yum install nginx\n\n(3)启动Nginx\n#service nginx start\n或\n#systemctl start nginx.service\n(4)重启nginx\nservice nginx restart\n")])]),r("h2",{attrs:{id:"查看nginx是否启动"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#查看nginx是否启动","aria-hidden":"true"}},[e._v("#")]),e._v(" 查看nginx是否启动")]),r("ol",[r("li",[e._v("查看进程列表并过滤\nLinux每个应用运行都会产生一个进程，那么我们就可以通过查看Nginx进程是否存在来判断它是否启动。\n用ps -ef列出进程列表，然后通过grep过滤。")])]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("ps -ef | grep nginx \n")])]),r("ol",{attrs:{start:"2"}},[r("li",[e._v("直接查看进程id")])]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("ps -C nginx -o pid\n")])]),r("p",[e._v("这种直接返回pid的方式比较适合跟其他程序结合使用，比如在shell/python脚本中执行这个命令拿到pid，让后根据pid来判断Nginx是否启动。\n3. 使用netstat命令")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("如果我们的Nginx运行在80端口，那么就可以通过netstat -anp | grep :80命令来判断Nginx是否启动。\n")])]),r("ol",{attrs:{start:"4"}},[r("li",[e._v("使用lsof命令\nlsof -i:80 也可以查到80端口进程是否有进程在运行")])]),r("h1",{attrs:{id:"etc-hosts-主机配置文件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#etc-hosts-主机配置文件","aria-hidden":"true"}},[e._v("#")]),e._v(" /etc/hosts 主机配置文件")]),r("p",[e._v("Linux系统中一个负责IP地址与域名快速解析的文件\nhosts文件包含了IP地址和主机名之间的映射，还包括主机名的别名\nhosts文件的格式如下：\nIP地址 主机名/域名"),r("br"),e._v("\n第一部份：网络IP地址；\n第二部份：主机名或域名；\n第三部份：主机名别名；")]),r("h3",{attrs:{id:"主要解决的问题："}},[r("a",{staticClass:"header-anchor",attrs:{href:"#主要解决的问题：","aria-hidden":"true"}},[e._v("#")]),e._v(" 主要解决的问题：")]),r("ol",[r("li",[e._v("远程登录linux主机过慢\n有时客户端想远程登录一台linux主机，但每次登录输入密码后都会等很长一段时间才会进入，这是因为linux主机在返回信息时需要解析ip，如果在linux主机的hosts文件事先加入客户端的ip地址，这时再从客户端远程登录linux就会变很快。")]),r("li",[e._v("双机互联\n当两台主机只是双机互连时，这时两台主机都需要设置自己的ip，同时在对方的hosts文件里加入自己的ip和主机名。")])]),r("h3",{attrs:{id:"显示主机名"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#显示主机名","aria-hidden":"true"}},[e._v("#")]),e._v(" 显示主机名")]),r("p",[e._v("hostname")]),r("h3",{attrs:{id:"临时设置主机名"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#临时设置主机名","aria-hidden":"true"}},[e._v("#")]),e._v(" 临时设置主机名")]),r("p",[e._v("hostname test100")]),r("h2",{attrs:{id:"浏览器环境"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#浏览器环境","aria-hidden":"true"}},[e._v("#")]),e._v(" 浏览器环境")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('"babel": {\n  "presets": [\n    [\n      "env",\n      {\n        "targets": {\n          "browsers": [\n              "last 2 versions", \n              "ie >= 7",\n              "chrome": 56,\n              "> 5%"\n              ]\n        }\n      }\n    ]\n  ]\n},\n')])]),r("h2",{attrs:{id:"node-js环境"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#node-js环境","aria-hidden":"true"}},[e._v("#")]),e._v(" node.js环境")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('"babel": {\n  "presets": [\n    [\n      "env",\n      {\n        "targets": {\n          "node": "current"\n        }\n      }\n    ]\n  ]\n},\n')])]),r("h2",{attrs:{id:"其他options"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#其他options","aria-hidden":"true"}},[e._v("#")]),e._v(" 其他options")]),r("ul",[r("li",[e._v('modules (string, default: "commonjs")')]),r("li",[e._v("useBuiltIns")]),r("li",[e._v("debug (boolean, default: false)")])]),r("h2",{attrs:{id:"mysql相关操作"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mysql相关操作","aria-hidden":"true"}},[e._v("#")]),e._v(" mysql相关操作")]),r("h3",{attrs:{id:"常用操作"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#常用操作","aria-hidden":"true"}},[e._v("#")]),e._v(" 常用操作")]),r("p",[r("a",{attrs:{href:"https://www.cnblogs.com/bestlove/p/6706318.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("常用操作")])]),r("h3",{attrs:{id:"数据库的迁移"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数据库的迁移","aria-hidden":"true"}},[e._v("#")]),e._v(" 数据库的迁移")]),r("p",[r("a",{attrs:{href:"https://www.cnblogs.com/abc8023/p/6745402.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("数据库迁移")]),r("a",{attrs:{href:"https://www.cnblogs.com/SZxiaochun/p/8359456.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("数据库迁移2")])]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("1. 导出数据和表结构 mysqldump -uroot -p schedule > schedule.sql\n2. sz schedule.sql 导出到桌面 [sz]\n3. 进入目标数据库 mysql > schedule\n4. 设置数据库编码 set names utf8\n5. 导入数据 source /home/xxxx/schedule.sql; 另可使用 mysql -uroot -p < /home/user/mysql-dump.sql\n")])]),r("h3",{attrs:{id:"mysql无法启动error-mysql-is-running-but-pid-file-could-not-be-found"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mysql无法启动error-mysql-is-running-but-pid-file-could-not-be-found","aria-hidden":"true"}},[e._v("#")]),e._v(" mysql无法启动ERROR! MySQL is running but PID file could not be found")]),r("ol",[r("li",[e._v("杀进程")])]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("查看下数据库运行状态\n/etc/init.d/mysql status  提示 ERROR! MySQL is running but PID file could not be found\n先打印MYSQL进程\nps aux | grep mysql\n然后KILL进程\nkill -9 pid1 pid2 …\n再启动MYSQL\n/etc/init.d/mysql start\n再检查mysql运行状态\n/etc/init.d/mysql status\n提示成功\n")])]),r("h2",{attrs:{id:"安装nginx-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#安装nginx-2","aria-hidden":"true"}},[e._v("#")]),e._v(" 安装nginx")]),r("h2",{attrs:{id:"tar-gz安装"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#tar-gz安装","aria-hidden":"true"}},[e._v("#")]),e._v(" tar.gz安装")]),r("ol",[r("li",[e._v("cd /usr/local")]),r("li",[e._v("tar -zxvf nginx-xxxx")]),r("li",[e._v("cd /nginx")]),r("li",[e._v("./configure")]),r("li",[e._v("make")]),r("li",[e._v("make install")])]),r("h2",{attrs:{id:"nodejs下载目录"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#nodejs下载目录","aria-hidden":"true"}},[e._v("#")]),e._v(" nodejs下载目录")]),r("blockquote",[r("p",[e._v("centOS 6.0 安装node最好下载已编译后的压缩文件，不然gcc版本不支持")])]),r("p",[r("a",{attrs:{href:"https://nodejs.org/dist/v8.11.3/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://nodejs.org/dist/v8.11.3/")])]),r("h2",{attrs:{id:"安装mysql"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#安装mysql","aria-hidden":"true"}},[e._v("#")]),e._v(" 安装mysql")]),r("p",[r("a",{attrs:{href:"https://blog.csdn.net/nemo____/article/details/72897455",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://blog.csdn.net/nemo____/article/details/72897455")])]),r("h2",{attrs:{id:"彻底卸载mysql"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#彻底卸载mysql","aria-hidden":"true"}},[e._v("#")]),e._v(" 彻底卸载mysql")]),r("p",[r("a",{attrs:{href:"https://www.jb51.net/article/97516.htm",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.jb51.net/article/97516.htm")])]),r("h2",{attrs:{id:"mysql-忘记密码"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mysql-忘记密码","aria-hidden":"true"}},[e._v("#")]),e._v(" mysql 忘记密码")]),r("p",[r("a",{attrs:{href:"https://blog.csdn.net/kevinlinkai/article/details/51863034",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://blog.csdn.net/kevinlinkai/article/details/51863034")])]),r("h2",{attrs:{id:"查看和设置rpm的默认安装路径"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#查看和设置rpm的默认安装路径","aria-hidden":"true"}},[e._v("#")]),e._v(" 查看和设置rpm的默认安装路径")]),r("p",[r("code",[e._v("rpm -ql XXX.rpm")]),e._v(" 就可以看到XXX在系统的哪些位置")]),r("p",[e._v("大多数人安装RPM包，都是使用下面的命令来安装：")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("rpm -ivh xxxx.rpm\n")])]),r("p",[e._v("这是最简单的安装方式，RPM包中的文件将被安装到打包时所指定的默认目录中。\n但在有的时候，我们没有系统的root权限不能写入根目录，或者因为某种原因(比如在进行文件恢复时)想改变一下RPM的默认安装路径。这时可以用下面的小技巧。\n首先用下面的命令查看一下该RPM包的默认安装目录，例如：")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("rpm -qpl ext3grep-0.10.0-1.el5.rf.i386.rpm\n/usr/bin/ext3grep\n/usr/share/doc/ext3grep-0.10.0\n/usr/share/doc/ext3grep-0.10.0/INSTALL\n/usr/share/doc/ext3grep-0.10.0/LICENSE.GPL2\n/usr/share/doc/ext3grep-0.10.0/NEWS\n/usr/share/doc/ext3grep-0.10.0/README\n")])]),r("p",[e._v("上面的命令列出了每一个文件即将被安装的位置，现在我们只需要重新用–relocate参数把安装目录定位一下就可以了：\nrpm -i --relocate /usr/bin=/home/easwy/bin --relocate /usr/share/doc=/home/easwy/doc ext3grep-0.10.0-1.el5.rf.i386.rpm")]),r("h2",{attrs:{id:"查看-selinux状态及关闭selinux"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#查看-selinux状态及关闭selinux","aria-hidden":"true"}},[e._v("#")]),e._v(" 查看 SELinux状态及关闭SELinux")]),r("h3",{attrs:{id:"查看selinux状态："}},[r("a",{staticClass:"header-anchor",attrs:{href:"#查看selinux状态：","aria-hidden":"true"}},[e._v("#")]),e._v(" 查看SELinux状态：")]),r("p",[e._v("1、/usr/sbin/sestatus -v      ##如果SELinux status参数为enabled即为开启状态")]),r("p",[e._v("SELinux status:                 enabled")]),r("p",[e._v("2、getenforce                 ##也可以用这个命令检查")]),r("h3",{attrs:{id:"关闭selinux："}},[r("a",{staticClass:"header-anchor",attrs:{href:"#关闭selinux：","aria-hidden":"true"}},[e._v("#")]),e._v(" 关闭SELinux：")]),r("p",[e._v("1、临时关闭（不用重启机器）：")]),r("p",[e._v("setenforce 0                  ##设置SELinux 成为permissive模式")]),r("pre",[r("code",[e._v("                          ##setenforce 1 设置SELinux 成为enforcing模式\n")])]),r("p",[e._v("2、修改配置文件需要重启机器：")]),r("p",[e._v("修改/etc/selinux/config 文件")]),r("p",[e._v("将SELINUX=enforcing改为SELINUX=disabled")]),r("p",[e._v("重启机器即可")]),r("h2",{attrs:{id:"离线安装gcc编译环境"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#离线安装gcc编译环境","aria-hidden":"true"}},[e._v("#")]),e._v(" 离线安装gcc编译环境")]),r("p",[r("a",{attrs:{href:"https://www.cnblogs.com/skey_chen/p/5749094.html?utm_source=itdadao&utm_medium=referral",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.cnblogs.com/skey_chen/p/5749094.html?utm_source=itdadao&utm_medium=referral")])]),r("h2",{attrs:{id:"linux升级内核（很容易出错）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#linux升级内核（很容易出错）","aria-hidden":"true"}},[e._v("#")]),e._v(" linux升级内核（很容易出错）")]),r("p",[r("a",{attrs:{href:"https://blog.csdn.net/hudan2714/article/details/53709400",target:"_blank",rel:"noopener noreferrer"}},[e._v("在线升级-https://blog.csdn.net/hudan2714/article/details/53709400")]),r("a",{attrs:{href:"https://blog.csdn.net/supersyd/article/details/54668963",target:"_blank",rel:"noopener noreferrer"}},[e._v("离线升级")])]),r("h3",{attrs:{id:"grub-conf"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#grub-conf","aria-hidden":"true"}},[e._v("#")]),e._v(" grub.conf")]),r("blockquote",[r("p",[e._v("设置启动内核")])]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("default=0 表示  表示第一个title下的内容为默认启动的kernel\n\ntimeout=5   表示等待进入选择kernel或操作系统菜单的时间为5秒\n\nsplashimage=(hd0,0)/boot/grub/splash.xpm.gz grub是以hd来识别磁盘的，第一磁盘为hd0，第二个磁盘为hd1...，而hd0,0表示第一个磁盘的第一个分区，hd0,1表示第一个磁盘的第二个分区 依次类推。\n")])]),r("h2",{attrs:{id:"dns"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#dns","aria-hidden":"true"}},[e._v("#")]),e._v(" DNS")]),r("p",[r("a",{attrs:{href:"https://blog.csdn.net/u013991521/article/details/80522269",target:"_blank",rel:"noopener noreferrer"}},[e._v("修改lunux主机名")])]),r("p",[e._v("查看服务器DNS：cat /etc/resolv.conf")]),r("h2",{attrs:{id:"rap"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rap","aria-hidden":"true"}},[e._v("#")]),e._v(" RAP")]),r("p",[r("a",{attrs:{href:"https://www.jianshu.com/p/8e3a7c2d9689",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.jianshu.com/p/8e3a7c2d9689")])]),r("h2",{attrs:{id:"邮件服务"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#邮件服务","aria-hidden":"true"}},[e._v("#")]),e._v(" 邮件服务")]),r("p",[r("a",{attrs:{href:"https://www.cnblogs.com/aaron-agu/p/7699871.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("postfix设置")]),r("a",{attrs:{href:"https://www.cnblogs.com/ilanni/p/5294611.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Postfix邮件服务器搭建之软件安装与配置")]),r("a",{attrs:{href:"https://blog.csdn.net/f1228308235/article/details/79057184",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://blog.csdn.net/f1228308235/article/details/79057184")]),e._v("\n(本地搭建gitlab环境，配置邮件通知和基本操作)[http://blog.51cto.com/881955/1704631]")]),r("h2",{attrs:{id:"rap安装"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rap安装","aria-hidden":"true"}},[e._v("#")]),e._v(" rap安装")]),r("p",[r("a",{attrs:{href:"https://www.jianshu.com/p/8e3a7c2d9689",target:"_blank",rel:"noopener noreferrer"}},[e._v("linux下rap安装")]),r("a",{attrs:{href:"https://www.cnblogs.com/smail-bao/p/6004029.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("RAP在centos上的部署")])]),r("h2",{attrs:{id:"查看历史命令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#查看历史命令","aria-hidden":"true"}},[e._v("#")]),e._v(" 查看历史命令")]),r("p",[r("a",{attrs:{href:"https://www.cnblogs.com/h2-database/archive/2012/07/04/2583318.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.cnblogs.com/h2-database/archive/2012/07/04/2583318.html")])]),r("h2",{attrs:{id:"待解决问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#待解决问题","aria-hidden":"true"}},[e._v("#")]),e._v(" 待解决问题")]),r("ul",[r("li",[e._v("各种端口的查看方式")]),r("li",[e._v("redhat_lsb")]),r("li",[e._v("yum -y")]),r("li",[e._v("nohup")]),r("li",[e._v("linux 光盘引导")]),r("li",[e._v("yum已安装列表")])]),r("h2",{attrs:{id:"linux-下安装报错"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#linux-下安装报错","aria-hidden":"true"}},[e._v("#")]),e._v(" linux 下安装报错")]),r("ul",[r("li",[e._v("the HTTP rewrite module requires the PCRE library.")])]),r("h2",{attrs:{id:"redis安装"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redis安装","aria-hidden":"true"}},[e._v("#")]),e._v(" redis安装")]),r("p",[e._v("[redis安装]")]),r("h2",{attrs:{id:"configure-make-make-install"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#configure-make-make-install","aria-hidden":"true"}},[e._v("#")]),e._v(" ./configure && make && make install")]),r("p",[r("a",{attrs:{href:"https://www.cnblogs.com/tinywan/p/7230039.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("./configure、make、make install 命令")])]),r("h2",{attrs:{id:"nginx静态服务配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#nginx静态服务配置","aria-hidden":"true"}},[e._v("#")]),e._v(" nginx静态服务配置")]),r("p",[r("a",{attrs:{href:"https://blog.csdn.net/dutsoft/article/details/55004064",target:"_blank",rel:"noopener noreferrer"}},[e._v("nginx静态服务配置")])]),r("h2",{attrs:{id:"nohub-与"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#nohub-与","aria-hidden":"true"}},[e._v("#")]),e._v(" nohub 与 &")]),r("ul",[r("li",[r("p",[e._v("& 指在后台运行，但当用户推出(挂起)的时候，命令自动也跟着退出")])]),r("li",[r("p",[e._v("nohup 不挂断的运行，注意并没有后台运行的功能，，就是指，用nohup运行命令可以使命令永久的执行下去，和用户终端没有关系，例如我们断开SSH连接都不会影响他的运行，注意了nohup没有后台运行的意思；&才是后台运行")])])]),r("p",[e._v("例子：")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("1. sh test.sh &  \n将sh test.sh任务放到后台 ，即使关闭xshell退出当前session依然继续运行，但标准输出和标准错误信息会丢失（缺少的日志的输出）\n\n将sh test.sh任务放到后台 ，关闭xshell，对应的任务也跟着停止。\n2. nohup sh test.sh  \n将sh test.sh任务放到后台，关闭标准输入，终端不再能够接收任何输入（标准输入），重定向标准输出和标准错误到当前目录下的nohup.out文件，即使关闭xshell退出当前session依然继续运行。\n3. nohup sh test.sh  & \n将sh test.sh任务放到后台，但是依然可以使用标准输入，终端能够接收任何输入，重定向标准输出和标准错误到当前目录下的nohup.out文件，即使关闭xshell退出当前session依然继续运行。\n")])]),r("h2",{attrs:{id:"linux中快速清空文件内容"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#linux中快速清空文件内容","aria-hidden":"true"}},[e._v("#")]),e._v(" linux中快速清空文件内容")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('$ : > filename \n$ > filename \n$ echo "" > filename \n$ echo > filename \n$ cat /dev/null > filename\n')])]),r("h2",{attrs:{id:"chconfig"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#chconfig","aria-hidden":"true"}},[e._v("#")]),e._v(" chconfig")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("chkconfig  mysql on     //添加mysql 至系统服务并设置为开机启动 \nservice  mysql  start  //启动mysql\n")])]),r("h2",{attrs:{id:"mariadb安装部署"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mariadb安装部署","aria-hidden":"true"}},[e._v("#")]),e._v(" mariaDB安装部署")]),r("p",[r("a",{attrs:{href:"https://www.cnblogs.com/river2005/p/6813618.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("mariaDB安装部署")])]),r("h2",{attrs:{id:"rsync-报错"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rsync-报错","aria-hidden":"true"}},[e._v("#")]),e._v(" rsync 报错")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("bash: rsync: command not found\nrsync: connection unexpectedly closed (0 bytes received so far) [sender]\nrsync error: remote command not found (code 127) at io.c(600) [sender=3.0.6]\n")])]),r("p",[e._v("报错原因：\n线上的新服务器没有安装rsync导致。")]),r("p",[e._v("解决办法：\n新服务器（目标服务器）执行命令 yum install rsync -y 问题解决。")]),r("h2",{attrs:{id:"centos7-0-没有netstat-和-ifconfig命令问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#centos7-0-没有netstat-和-ifconfig命令问题","aria-hidden":"true"}},[e._v("#")]),e._v(" centos7.0 没有netstat 和 ifconfig命令问题")]),r("p",[e._v("运行  yum install net-tools  就OK了")]),r("h2",{attrs:{id:"centos7查询端口占用，清除端口占用的程序"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#centos7查询端口占用，清除端口占用的程序","aria-hidden":"true"}},[e._v("#")]),e._v(" CentOS7查询端口占用，清除端口占用的程序")]),r("p",[e._v("1、根据端口号得到其占用的进程的详细信息")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("netstat -tlnp|grep 80\ntcp        0      0 192.168.33.10:80            0.0.0.0:*                   LISTEN      5014/httpd\ntcp        0      0 0.0.0.0:48054               0.0.0.0:*                   LISTEN      5386/java\n")])]),r("p",[e._v("2、一次性的清除占用80端口的程序")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('lsof -i :80|grep -v "PID"|awk \'{print "kill -9",$2}\'|sh\n')])]),r("p",[e._v("3、手工终止进程的运行")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("kill 5014\n如果终止不了，可以强制终止\nkill -9 5014\n")])]),r("h2",{attrs:{id:"centos7开放端口，打开防火墙"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#centos7开放端口，打开防火墙","aria-hidden":"true"}},[e._v("#")]),e._v(" centOS7开放端口，打开防火墙")]),r("p",[e._v("1、查看已经开放的端口")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("firewall-cmd --list-ports\n")])]),r("p",[e._v("2、开启端口")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("firewall-cmd --zone=public --add-port=80/tcp --permanent\n\n–zone #作用域\n\n–add-port=80/tcp #添加端口，格式为：端口/通讯协议\n\n–permanent #永久生效，没有此参数重启后失效\n")])]),r("p",[e._v("3、防火墙设置")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("firewall-cmd --reload #重启firewall\n\nsystemctl stop firewalld.service #停止firewall\n\nsystemctl disable firewalld.service #禁止firewall开机启动\n")])]),r("h2",{attrs:{id:"防火墙"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#防火墙","aria-hidden":"true"}},[e._v("#")]),e._v(" 防火墙")]),r("p",[r("code",[e._v("etc/sysconfig/iptables")])]),r("p",[e._v("打开防火前通过端口:\n"),r("code",[e._v("-A INPUT -m state --state NEW -m tcp -p tcp --dport 8080 -j ACCEPT")])]),r("p",[e._v("此行必须放在")]),r("pre",[r("code",[e._v("-A INPUT -j REJECT --reject-with icmp-host-prohibited\n-A FORWARD -j REJECT --reject-with icmp-host-prohibited\n")])]),r("p",[e._v("这两行的前面，否则一样无效。")]),r("h2",{attrs:{id:"待阅读文档"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#待阅读文档","aria-hidden":"true"}},[e._v("#")]),e._v(" 待阅读文档")]),r("p",[r("a",{attrs:{href:"https://blog.csdn.net/hybaym/article/details/50929958",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://blog.csdn.net/hybaym/article/details/50929958")]),r("a",{attrs:{href:"https://blog.csdn.net/qq_38570571/article/details/79268426",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://blog.csdn.net/qq_38570571/article/details/79268426")])]),r("h2",{attrs:{id:"question"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#question","aria-hidden":"true"}},[e._v("#")]),e._v(" question")]),r("h3",{attrs:{id:"索引节点-inode-爆满问题处理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#索引节点-inode-爆满问题处理","aria-hidden":"true"}},[e._v("#")]),e._v(" 索引节点(inode)爆满问题处理")])])}],s=a(1),n=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},r,!1,null,null,null);t.default=n.exports}}]);