(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{230:function(t,e,s){"use strict";s.r(e);var a=s(1),n=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"ssh-key的生成和使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ssh-key的生成和使用","aria-hidden":"true"}},[t._v("#")]),t._v(" ssh Key的生成和使用")]),s("blockquote",[s("p",[t._v("sshkey会默认生成在用户home目录下，所以查看家目录下是否存在.ssh 文件夹，以及是否存在相关目录就行。（~/.ssh/id_rsa）")])]),s("h2",{attrs:{id:"生成sshkey"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生成sshkey","aria-hidden":"true"}},[t._v("#")]),t._v(" 生成sshKey")]),s("p",[t._v("在控制台输入：")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("ssh-keygen -t rsa //  -t 的意思是选择kye的type。分别有 RSA 和 DSA 两种。具体请自行百度 \n")])]),s("p",[t._v("控制台输出如下：")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Generating public/private rsa key pair. \nEnter file in which to save the key (/root/.ssh/id_rsa): \nCreated directory ‘/root/.ssh’. \nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /root/.ssh/id_rsa. \nYour public key has been saved in /root/.ssh/id_rsa.pub. \n")])]),s("p",[t._v("现在你的私钥被放在了"),s("code",[t._v("~/.ssh/id_rsa")]),t._v(" 这个文件里，而公钥被放在了 "),s("code",[t._v("~/.ssh/id_rsa.pub")]),t._v(" 这个文件里。")]),s("h2",{attrs:{id:"使用ssh-key"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用ssh-key","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用ssh key")]),s("p",[t._v("使用ssh key的目的是使得两台机器之间建立互信，从其中一台登陆到另一台时不需要密码。具体方式如下：")]),s("ol",[s("li",[t._v("先在主机A上创建密钥对")])]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("ssh-keygen -t rsa\n")])]),s("ol",{attrs:{start:"2"}},[s("li",[t._v("把主机A的公钥放在主机B上")])]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("scp -r /root/.ssh/id_rsa.pub 192.168.31.147:/root/.ssh/authorized_keys\n")])]),s("h1",{attrs:{id:"git-bash命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-bash命令","aria-hidden":"true"}},[t._v("#")]),t._v(" git bash命令")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("pwd  打印当前完整路径\n/   根目录\n~  家目录\nls  列出当前路径下所有文件（夹）\nls -a  列出当前路径下所有文件（夹），包括隐藏文件（夹）\nls -al  列出当前路径下所有文件的（夹）详细信息（包括隐藏文件）\ncd  切换目录\ncd ../  进入上一级目录\ncd test/  进入test目录\nmkdir test  新建test目录\ntouch a.html  新建a.html文件\nmv a.html b.html  a.html文件重命名为b.html\nrm a.html  删除a.html文件\nrm -r test  删除test目录\nrm -rf test  删除test目录（强制删除）\n\nvim a.html  用vim编辑a.html文件（如果没有a.html文件则自动创建）\ni  切换vim到编辑模式（windows下貌似很多按键都可以）\n:w  保存vim编辑器的内容\n:q  退出vim编辑器\n:wq  保存并退出\n:q!  强制退出（不提示未保存等）\ngg  定位到文件开头\nG   定位到文件尾\ny  复制\nyy  复制整行（nyy或yny  复制n行，n为数字）\nd  剪切\ndd  剪切整行（ndd或dnd  剪切n行，n为数字\np  粘贴到光标后（复制整行则在光标下一行）\nP  粘贴到光标前（复制整行则在光标上一行）\nctrl+f  下翻整页（ctrl+d 下翻半页）\nctrl+b  上翻整页（ctrl+u 上翻半页）\n/string  查找string\nu  撤销\n")])]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('git status  查看当前git状态\ngit add .  提交所有修改到暂存区\ngit add -u  提交修改和删除的文件，不提交新文件(git add --update的缩写)\ngit add -A 提交所有变化(git add --all的缩写)\n\ngit checkout -- <file>  撤销对file文件的修改\ngit checkout -- . 撤销上次commit之后所有的修改\n\ngit pull  把远程仓库的更新合并到本地仓库，可以在本地push前执行。当别人和自己修改同一个文件的同一个地方后执行git pull的时候会出现冲突，需手动解决。\n\ngit commit -am "add" 将暂存区文件提交到本地仓库，也可以分开写-a -m，已经被追踪的(tracked)文件再次修改后commit时，可以不用加-a，不加-m会自动用vim打开一个文件用以填写注释，-m "xxx"引号中的文字即为注释。注释不写会提示Aborting commit due to empty commit message.\ngit reset HEAD <file>  将已存入暂存区的file文件unstage\ngit reset HEAD .  将已存入暂存区的所有文件unstage\ngit push origin master  将本地仓库push到远程仓库，origin为远程仓库地址的别名，可通过git remote自定义，master为远程仓库origin的master分支\n')])]),s("h1",{attrs:{id:"本地创建仓库和文件推送到远程空项目中"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#本地创建仓库和文件推送到远程空项目中","aria-hidden":"true"}},[t._v("#")]),t._v(" 本地创建仓库和文件推送到远程空项目中")]),s("ul",[s("li",[t._v("在线上先创建一个新项目，用于获取线上仓库地址")]),s("li",[t._v("在本地常见文件夹，并初始化为git仓库")]),s("li",[t._v("使用线上仓库地址在本地仓库中添加远程仓库标签，用于推送本地仓库到线上")]),s("li",[t._v("使用git命令在本地仓库中创建文件")]),s("li",[t._v("推送本地仓库到线上")])]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git init  将新建的仓库文件夹初始化本地git仓库\ngit remote add <远程仓库地址别名> <远程仓库地址>  给远程仓库的地址起一个别名，起完别名之后用git push命令将本地库推送到远程库，不起别名直接用远程库的地址也是可以的\ngit remote -v  查看本地仓库存储的远程库的地址信息\ngit remote remove origin  删除origin标签(别名)，也即删除本地仓库的origin对应的远程仓库的地址\ngit remote set-url origin <远程仓库地址>  修改origin对应的远程仓库的地址\ngit remote rename origin <新别名>  重命名origin标签\n\ngit branch <分支名>  创建一个新的分支\ngit checkout -b <分支名>  创建并切换到新创建的分支\ngit checkout <分支名>  切换到分支\ngit merge <分支名>  例如当前所在分支为master，<分支名>为a，命令含义为：把a分支上的内容合并到master分支上来\n")])])])}],!1,null,null,null);e.default=n.exports}}]);