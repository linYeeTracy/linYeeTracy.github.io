(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{278:function(t,a,s){"use strict";s.r(a);var n=s(1),r=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("blockquote",[s("p",[t._v("正则表达式，一个十分古老而又强大的文本处理工具，仅仅用一段非常简短的表达式语句，便能够快速实现一个非常复杂的业务逻辑。熟练地掌握正则表达式的话，能够使你的开发效率得到极大的提升。")])]),s("h2",{attrs:{id:"作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#作用","aria-hidden":"true"}},[t._v("#")]),t._v(" 作用")]),s("ul",[s("li",[t._v("测试字符串的某个模式")]),s("li",[t._v("替换文本")]),s("li",[t._v("根据模式匹配从字符串中提取一个子字符串")])]),s("h2",{attrs:{id:"如何建立一个正则表达式？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何建立一个正则表达式？","aria-hidden":"true"}},[t._v("#")]),t._v(" 如何建立一个正则表达式？")]),s("p",[t._v("使用RegExp()构造函数来创建RegExp对象\n特殊的字面量语法来创建，定义为包含在一对斜杠（/）之间的字符\nep:")]),s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token comment"}},[t._v("// 两者效果完全相同，用来匹配所有以字母“s”结尾的字符串。")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token regex"}},[t._v("/s$/")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("RegExp")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s$"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),s("p",[t._v(":::success\n由"),s("code",[t._v("普通字符")]),t._v("（例如字符 a 到 z）以及特殊字符（称为"),s("code",[t._v("元字符")]),t._v("）"),s("code",[t._v("( [ { \\ ^ $ | ) ? * + .")]),t._v("组成\n元字符必须经过转义\n:::")]),s("h2",{attrs:{id:"直接量字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#直接量字符","aria-hidden":"true"}},[t._v("#")]),t._v(" 直接量字符")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 想在正则表达式中使用这些字符的直接量进行匹配，则必须使用前缀”\\”\n// 其他标点符号(比如@和引号)无特殊含义，在正则表达式中按照字面含义进行匹配。\n^, $, ., *, +, ?, =, !, :, |, \\, /,(,),[,],{, }\n")])]),s("h2",{attrs:{id:"预定义字符类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#预定义字符类","aria-hidden":"true"}},[t._v("#")]),t._v(" 预定义字符类")]),s("blockquote",[s("p",[t._v("将直接量字符单独放进方括号内就组成了字符类。一个字符类可以匹配它包含的任意字符。字符类可以使用连字符来表示字符范围。")])]),s("table",[s("thead",[s("tr",[s("th",[t._v("字 符")]),s("th",[t._v("含 义")]),s("th",[t._v("等价类")])])]),s("tbody",[s("tr",[s("td",[t._v("[...]")]),s("td",[t._v("方括号内的任意字符")]),s("td")]),s("tr",[s("td",[t._v("[^...]")]),s("td",[t._v("不在方括号内的任意字符，取反")]),s("td")]),s("tr",[s("td",[t._v(".")]),s("td",[t._v("除了回车符和换行符之外的所有字符")]),s("td",[t._v("[^\\n\\r]")])]),s("tr",[s("td",[t._v("\\w")]),s("td",[t._v("单词字符（字母、数字、下划线）")]),s("td",[t._v("[a-zA-Z_0-9]")])]),s("tr",[s("td",[t._v("\\W")]),s("td",[t._v("非单词字符")]),s("td",[t._v("[a-zA-Z_0-9]")])]),s("tr",[s("td",[t._v("\\s")]),s("td",[t._v("空白符")]),s("td",[t._v("[\\t\\n\\x0B\\f\\r]")])]),s("tr",[s("td",[t._v("\\S")]),s("td",[t._v("非空白符")]),s("td",[t._v("[^\\t\\n\\x0B\\f\\r]")])]),s("tr",[s("td",[t._v("\\d")]),s("td",[t._v("数字字符")]),s("td",[t._v("[0-9]")])]),s("tr",[s("td",[t._v("\\D")]),s("td",[t._v("非数字字符")]),s("td",[t._v("[^0-9]")])]),s("tr",[s("td",[t._v("[\\b]")]),s("td",[t._v("退格直接量(特例)")]),s("td")])])]),s("p",[t._v("ep:")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("/[a,b,c]/:表示和字母”a”,”b”,”c”中的任意一个都匹配\n/[a-z]/:匹配拉丁字母表中的小写字母\n/[/s/d]/:匹配任意空白符或数字\n")])]),s("h2",{attrs:{id:"边界"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#边界","aria-hidden":"true"}},[t._v("#")]),t._v(" 边界")]),s("table",[s("thead",[s("tr",[s("th",[t._v("字 符")]),s("th",[t._v("含 义")])])]),s("tbody",[s("tr",[s("td",[t._v("^")]),s("td",[t._v("以xx开头")])]),s("tr",[s("td",[t._v("$")]),s("td",[t._v("以xx结尾")])]),s("tr",[s("td",[t._v("\\b")]),s("td",[t._v("单词边界，指[a-zA-Z_0-9]之外的字符 \\b 与一个字边界匹配，如er\\b 与“never”中的“er”匹配，但与“verb”中的“er”不匹配。")])]),s("tr",[s("td",[t._v("\\B")]),s("td",[t._v("非单词边界")])])])]),s("h2",{attrs:{id:"量词（重复）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#量词（重复）","aria-hidden":"true"}},[t._v("#")]),t._v(" 量词（重复）")]),s("blockquote",[s("p",[t._v("用以指定字符重复的标记，单个出现时皆是贪婪量词")])]),s("table",[s("thead",[s("tr",[s("th",[t._v("字 符")]),s("th",[t._v("含 义")])])]),s("tbody",[s("tr",[s("td",[t._v("{n,m}")]),s("td",[t._v("匹配前一项n-m次")])]),s("tr",[s("td",[t._v("{n,}")]),s("td",[t._v("匹配前一项至少0次或者n次")])]),s("tr",[s("td",[t._v("{n}")]),s("td",[t._v("匹配前一项n次")])]),s("tr",[s("td",[t._v("?")]),s("td",[t._v("匹配前一项0次或者1次(也就是前一项是可选的,等价于{0,1})")])]),s("tr",[s("td",[t._v("+")]),s("td",[t._v("匹配前一项1次或者多次(等价于{1,})")])]),s("tr",[s("td",[t._v("*")]),s("td",[t._v("匹配前一项0次或者多次,等价于{0,}")])])])]),s("p",[t._v("ep:")]),s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("\\d"),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{attrs:{class:"token number"}},[t._v("2")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{attrs:{class:"token number"}},[t._v("4")]),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token operator"}},[t._v("/")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("匹配"),s("span",{attrs:{class:"token number"}},[t._v("2")]),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token number"}},[t._v("4")]),t._v("个数字。\n"),s("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("\\w"),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{attrs:{class:"token number"}},[t._v("3")]),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\\d"),s("span",{attrs:{class:"token operator"}},[t._v("?")]),s("span",{attrs:{class:"token operator"}},[t._v("/")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("精确匹配三个单词和一个可选的数字。\n"),s("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("\\s"),s("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("java\\s"),s("span",{attrs:{class:"token operator"}},[t._v("+")]),s("span",{attrs:{class:"token operator"}},[t._v("/")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("匹配前后有"),s("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("个或多个空格的字符串”java”\n"),s("span",{attrs:{class:"token operator"}},[t._v("/")]),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token operator"}},[t._v("^")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token operator"}},[t._v("*")]),s("span",{attrs:{class:"token operator"}},[t._v("/")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token function"}},[t._v("匹配0个或多个非左括号的字符")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("这里实际上能与"),s("span",{attrs:{class:"token string"}},[t._v('"("')]),t._v("匹配"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),s("h3",{attrs:{id:"惰性量词"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#惰性量词","aria-hidden":"true"}},[t._v("#")]),t._v(" 惰性量词")]),s("p",[t._v('惰性量词仅仅在贪婪量词后面加个"?"而已,如"a+"是贪婪匹配的,"a+?"则是惰性的')]),s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"abc"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" re "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token regex"}},[t._v("/\\w+/")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{attrs:{class:"token comment"}},[t._v("//将匹配abc  ")]),t._v("\nre "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token regex"}},[t._v("/\\w+?/")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{attrs:{class:"token comment"}},[t._v("//将匹配a  ")]),t._v("\n")])]),s("blockquote",[s("p",[t._v('在使用"'),s("em",[t._v('",和"?"时要注意,由于这些字符能匹配0个字符,因此它们允许什么都不匹配:\n/a')]),t._v("/能匹配字符串”bbbb”，因其含有0个a。")])]),s("h3",{attrs:{id:"贪婪与懒惰（非贪婪）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#贪婪与懒惰（非贪婪）","aria-hidden":"true"}},[t._v("#")]),t._v(" 贪婪与懒惰（非贪婪）")]),s("p",[t._v('上表中列出的匹配字符为”贪婪的”匹配，它总是尽可能多地匹配,且允许后续的正则表达式继续匹配。\n非贪婪匹配,只需在待匹配的字符后跟随一个问号即可,"?",+?,*?或{1,5}?。\n如何开启懒惰模式？ 在量词后面加? 例:')]),s("ul",[s("li",[t._v("/a+/:匹配”aaa”时,三个字符都被匹配,")]),s("li",[t._v("/a+?/:匹配”aaa”时,因其尽可能少的匹配,只能匹配第一个a")])]),s("h2",{attrs:{id:"选择-分组和引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#选择-分组和引用","aria-hidden":"true"}},[t._v("#")]),t._v(" 选择-分组和引用")]),s("blockquote",[s("p",[t._v("分组往往和反向引用一起使用，别被概念吓到：当一个正则表达式被分组后，每个分组自动被赋予一个组号，一左到右分别是 $1 $2…")])]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("'xxxx'.replace(reg, '$1');\n")])]),s("table",[s("thead",[s("tr",[s("th",[t._v("字 符")]),s("th",[t._v("含 义")])])]),s("tbody",[s("tr",[s("td",[t._v("“")]),s("td",[t._v("”")])]),s("tr",[s("td",[t._v("(...)")]),s("td",[t._v("组合,将几个项组合成为一个单元,这个单元可通过”")])]),s("tr",[s("td",[t._v("(?:..)")]),s("td",[t._v("只组合,把项组合到一个单元,但不记忆与该组相匹配的字符")])])])]),s("p",[t._v("ep:")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("/ab|cd|ef/:可以匹配”ab”,也可以匹配”cd”,还可以匹配”ef”.\n/\\d{3}|[a-z]{4}/:可以匹配3个数字,或者4个小写字母.\n(/[a-z]+(\\d+)/):匹配一个或多个小写字母后跟随了一位或多位数字,使用括号包裹后,可以从检索到的匹配中抽取数字了.\n\n")])]),s("blockquote",[s("p",[t._v("如果在反向引用中不想捕获年该如何操作? 加上 ?:即可")])]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("/^(?:\\d{4})[/-](\\d{2})[/-](\\d{2})$/\n")])]),s("h3",{attrs:{id:"模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模式","aria-hidden":"true"}},[t._v("#")]),t._v(" 模式")]),s("ul",[s("li",[t._v("(?:模式) 与模式 匹配，但不保存匹配项(非捕获分组)。")]),s("li",[t._v("先行断言(?=模式)：x只有在y前面才匹配，必须写成/x(?=y)/。 解释：找一个x，那个x的后面有y。")]),s("li",[t._v("先行否定断言(?!模式)： x只有不在y前面才匹配，必须写成/x(?!y)/。 解释：找一个x，那个x的后面没有y。")])]),s("h2",{attrs:{id:"指定匹配位置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#指定匹配位置","aria-hidden":"true"}},[t._v("#")]),t._v(" 指定匹配位置")]),s("blockquote",[s("p",[t._v("我们称这些元素为正则表达式的锚,它们将模式定位在搜索字符串的特定位置上.")])]),s("table",[s("thead",[s("tr",[s("th",[t._v("字 符")]),s("th",[t._v("含 义")])])]),s("tbody",[s("tr",[s("td",[t._v("^")]),s("td",[t._v("匹配字符串的开头,在多行检索中,匹配一行的开头")])]),s("tr",[s("td",[t._v("$")]),s("td",[t._v("匹配字符串的结尾,在多行检索中,匹配一行的结尾")])]),s("tr",[s("td",[t._v("\\b")]),s("td",[t._v("匹配一个单词边界,简言之,就是位于字符\\w和\\W之间的位置,或位于字符\\w和字符串的开头或结尾之间的位置(需要注意:[\\b]匹配的是退格符)")])]),s("tr",[s("td",[t._v("\\B")]),s("td",[t._v("匹配非单词边界的位置")])])])]),s("p",[t._v("ep:")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("/^JavaScript$/:匹配”JavaScript”单词\n/\\B[Ss]cript/:与”JavaScript”和”/postscript”匹配,但不与”script”与”Script\n")])]),s("h2",{attrs:{id:"修饰符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修饰符","aria-hidden":"true"}},[t._v("#")]),t._v(" 修饰符")]),s("blockquote",[s("p",[t._v("说明高级匹配的规则,放在”/“符号之外,第二条斜线后")])]),s("table",[s("thead",[s("tr",[s("th",[t._v("字 符")]),s("th",[t._v("含 义")])])]),s("tbody",[s("tr",[s("td",[t._v("i")]),s("td",[t._v("执行不区分大小写的匹配")])]),s("tr",[s("td",[t._v("g")]),s("td",[t._v("执行一个全局匹配,简言之,就是要找到所有的匹配,而不是在找到一个之后就停止")])]),s("tr",[s("td",[t._v("m")]),s("td",[t._v("多行匹配模式,^匹配一行的开头和字符串的开头,$匹配行的结束和字符串的结束")])])])]),s("p",[t._v("ep:")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("/java$/im:可以匹配”java”也可以匹配”Java\\nis fun”\n")])]),s("h2",{attrs:{id:"用于模式匹配的string方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用于模式匹配的string方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 用于模式匹配的string方法")]),s("blockquote",[s("p",[t._v("正则表达式的作用就是用来解析字符串")])]),s("h3",{attrs:{id:"search"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#search","aria-hidden":"true"}},[t._v("#")]),t._v(" search()")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("JavaScript.search(/script/i);//返回4\n")])]),s("ul",[s("li",[t._v("查找字符串,接受一个参数为正则表达式,返回返回一个与之匹配的子串的起始位置,若未找到返回-1.")]),s("li",[t._v("search()方法不支持全局属性检索,所以会忽略修饰符g")])]),s("h3",{attrs:{id:"replace"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#replace","aria-hidden":"true"}},[t._v("#")]),t._v(" replace()")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('text.replace(/javascript/gi,"JavaScript");\nvar quote = /"([^"]*)"/g;\ntext.replace(quote,\'“$1”\');\n')])]),s("ul",[s("li",[t._v("用以执行检索与替换操作,接受两个参数,第一个参数是一个正则,第二个是要进行替换的字符串")]),s("li",[t._v("若第一个参数是字符串,replace()则会直接搜索这个字符串")]),s("li",[t._v("若替换字符串中出现了$加数字,那么replace()将用与指定的子表达式相匹配的文本来替换这两个字符.")])]),s("h3",{attrs:{id:"match"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#match","aria-hidden":"true"}},[t._v("#")]),t._v(" match()")]),s("ul",[s("li",[s("p",[t._v("接受唯一一个参数,就是正则表达式,返回的是一个由匹配结果组成的数组.例:")]),s("blockquote",[s("p",[t._v('"1 plus 2 equals 3".match(/\\d+/g);//返回["1","2","3"]')])])]),s("li",[s("p",[t._v("若在这个正则表达式中没有设置修饰符g,match()就不会进行全局检索,它只检索第一个匹配。但即使match()执行的不是全局检索，它也返回一个数组。在这种情况下，数组的第一个元素就是匹配的字符串，余下的元素则是正则表达式中用圆括号括起来的子表达式。")])]),s("li",[s("p",[t._v("因此，如果macth()返回一个数组a，那么a[0]存放的是完整的匹配，a[1]存放的是与第一个圆括号括起来的表达式相匹配的子串，以此类推。为了和方法replace()保持以后，a[n]存放的是$n的内容。")])])]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('var url = /(\\w+):\\/\\/([\\w.]+)\\/(\\S*)/;\nvar text = "Visit my blog at http://www.example.com/~david";\nvar result = text.match(url);\nif (result != null) {\n    var fullurl = result[0]; \n    var protocol = result[1]; \n    var host = result[2]; \n    var path = result[3]; \n}\n')])]),s("h3",{attrs:{id:"split"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#split","aria-hidden":"true"}},[t._v("#")]),t._v(" split()")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('"1,2, 3,4 ,5".split(\',\')    // 返回["1", "2", " 3", "4 ", "5"]\n"1,2, 3,4 ,5".split(/\\s*,\\s*/) //返回["1","2"," 3","4 ","5"],允许两边可以留有任意多的空白符\n')])]),s("h2",{attrs:{id:"regexp对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#regexp对象","aria-hidden":"true"}},[t._v("#")]),t._v(" RegExp对象")]),s("p",[t._v("Javascript 通过内置对象RegExp支持正则表达式，有两种方法实例化RegExp对象")]),s("p",[t._v("字面量方法")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("const reg =/\\bis\\b/g\n")])]),s("p",[t._v("构造函数")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("const reg = new RegExp('\\\\bis\\\\b', 'g')\n")])]),s("blockquote",[s("p",[t._v("RegExp对象用以创建新的RegExp对象,可接受两个参数,第二个可选.")])]),s("ul",[s("li",[t._v("RegExp对象的第一个参数为正则表达式的主体部分,也就是/...../之间的文本,无论是字符串直接量,还是正则表达式都使用”\\”作为转义字符的前缀.")]),s("li",[t._v("第二个可选参数为指定正则表达式的修饰符,i,g,m或者他们的组合.参考:文本模式的则表达式-修饰符")])]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('var reg = new RegExp("\\\\d{5}","g");\nalert(reg.test("1J2a35786"));\nalert(reg.test("1J2a356"));\n')])]),s("h2",{attrs:{id:"regexp对象相关方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#regexp对象相关方法","aria-hidden":"true"}},[t._v("#")]),t._v(" regExp对象相关方法")]),s("h3",{attrs:{id:"test"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#test","aria-hidden":"true"}},[t._v("#")]),t._v(" test")]),s("blockquote",[s("p",[t._v("test,返回一个 Boolean 值，它指出在被查找的字符串中是否存在模式。如果存在则返回 true，否则就返回 false")])]),s("h3",{attrs:{id:"exec"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#exec","aria-hidden":"true"}},[t._v("#")]),t._v(" exec")]),s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" osVersion "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"Ubuntu 8"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{attrs:{class:"token comment"}},[t._v("//其中的8表示系统主版本号  ")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" re "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token regex"}},[t._v("/^[a-z]+\\s+\\d+$/i")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("//+号表示字符至少要出现1次,\\s表示空白字符,\\d表示一个数字  ")]),t._v("\n"),s("span",{attrs:{class:"token function"}},[t._v("alert")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("re"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("test")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("osVersion"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{attrs:{class:"token comment"}},[t._v("//true,但我们想知道主版本号  ")]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v("//另一个方法exec,返回一个数组,数组的第一个元素为完整的匹配内容  ")]),t._v("\nre"),s("span",{attrs:{class:"token operator"}},[t._v("=")]),s("span",{attrs:{class:"token regex"}},[t._v("/^[a-z]+\\s+\\d+$/i")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \narr "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" re"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("exec")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("osVersion"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),s("span",{attrs:{class:"token function"}},[t._v("alert")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{attrs:{class:"token comment"}},[t._v("//将osVersion完整输出,因为整个字符串刚好匹配re  ")]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v("//我只需要取出数字  ")]),t._v("\nre"),s("span",{attrs:{class:"token operator"}},[t._v("=")]),s("span",{attrs:{class:"token regex"}},[t._v("/\\d+/")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" re"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("exec")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("osVersion"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),s("span",{attrs:{class:"token function"}},[t._v("alert")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{attrs:{class:"token comment"}},[t._v("//8  ")]),t._v("\n")])]),s("p",[t._v("子匹配用法")]),s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token comment"}},[t._v("//exec返回的数组第1到n元素中包含的是匹配中出现的任意一个子匹配  ")]),t._v("\nre"),s("span",{attrs:{class:"token operator"}},[t._v("=")]),s("span",{attrs:{class:"token regex"}},[t._v("/^[a-z]+\\s+(\\d+)$/i")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{attrs:{class:"token comment"}},[t._v("//用()来创建子匹配  ")]),t._v("\narr "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("re"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("exec")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("osVersion"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),s("span",{attrs:{class:"token function"}},[t._v("alert")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{attrs:{class:"token comment"}},[t._v("//整个osVersion,也就是正则表达式的完整匹配  ")]),t._v("\n"),s("span",{attrs:{class:"token function"}},[t._v("alert")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{attrs:{class:"token comment"}},[t._v("//8,第一个子匹配,事实也可以这样取出主版本号  ")]),t._v("\n"),s("span",{attrs:{class:"token function"}},[t._v("alert")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{attrs:{class:"token comment"}},[t._v("//2  ")]),t._v("\nosVersion "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"Ubuntu 8.10"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{attrs:{class:"token comment"}},[t._v("//取出主版本号和次版本号  ")]),t._v("\nre "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token regex"}},[t._v("/^[a-z]+\\s+(\\d+)\\.(\\d+)$/i")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{attrs:{class:"token comment"}},[t._v("//.是正则表达式元字符之一,若要用它的字面意义须转义  ")]),t._v("\narr "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" re"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("exec")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("osVersion"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),s("span",{attrs:{class:"token function"}},[t._v("alert")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{attrs:{class:"token comment"}},[t._v("//完整的osVersion  ")]),t._v("\n"),s("span",{attrs:{class:"token function"}},[t._v("alert")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{attrs:{class:"token comment"}},[t._v("//8  ")]),t._v("\n"),s("span",{attrs:{class:"token function"}},[t._v("alert")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token number"}},[t._v("2")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{attrs:{class:"token comment"}},[t._v("//10  ")]),t._v("\n")])]),s("blockquote",[s("p",[t._v("当字符串不匹配re时,exec方法将返回null")])]),s("h2",{attrs:{id:"string-对象和正则相关的一些方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-对象和正则相关的一些方法","aria-hidden":"true"}},[t._v("#")]),t._v(" string 对象和正则相关的一些方法")]),s("h3",{attrs:{id:"replace-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#replace-2","aria-hidden":"true"}},[t._v("#")]),t._v(" replace")]),s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token comment"}},[t._v("//replace方法,用于替换字符串  ")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),s("span",{attrs:{class:"token string"}},[t._v('"some money"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),s("span",{attrs:{class:"token function"}},[t._v("alert")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("replace")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"some"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{attrs:{class:"token string"}},[t._v('"much"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{attrs:{class:"token comment"}},[t._v("//much money  ")]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v("//replace的第一个参数可以为正则表达式  ")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" re "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token regex"}},[t._v("/\\s/")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{attrs:{class:"token comment"}},[t._v("//空白字符  ")]),t._v("\n"),s("span",{attrs:{class:"token function"}},[t._v("alert")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("replace")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("re"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{attrs:{class:"token string"}},[t._v('"%"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{attrs:{class:"token comment"}},[t._v("//some%money  ")]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v("//在不知道字符串中有多少空白字符时,正则表达式极为方便  ")]),t._v("\nstr "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),s("span",{attrs:{class:"token string"}},[t._v('"some some             \\tsome\\t\\f"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \nre "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token regex"}},[t._v("/\\s+/")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),s("span",{attrs:{class:"token function"}},[t._v("alert")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("replace")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("re"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{attrs:{class:"token string"}},[t._v('"#"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{attrs:{class:"token comment"}},[t._v("//但这样只会将第一次出现的一堆空白字符替换掉  ")]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v("//因为一个正则表达式只能进行一次匹配,\\s+匹配了第一个空格后就退出了  ")]),t._v("\nre "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token regex"}},[t._v("/\\s+/g")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{attrs:{class:"token comment"}},[t._v("//g,全局标志,将使正则表达式匹配整个字符串  ")]),t._v("\n"),s("span",{attrs:{class:"token function"}},[t._v("alert")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("replace")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("re"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{attrs:{class:"token string"}},[t._v('"@"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{attrs:{class:"token comment"}},[t._v("//some@some@some@  ")]),t._v("\n")])]),s("h3",{attrs:{id:"split-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#split-2","aria-hidden":"true"}},[t._v("#")]),t._v(" split")]),s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token comment"}},[t._v("//另一个与之相似的是split  ")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"a-bd-c"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("split")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"-"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{attrs:{class:"token comment"}},[t._v('//返回["a","bd","c"]  ')]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v("//如果str是用户输入的,他可能输入a-bd-c也可能输入a bd c或a_bd_c,但不会是abdc(这样就说他输错了)  ")]),t._v("\nstr "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"a_db-c"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{attrs:{class:"token comment"}},[t._v("//用户以他喜欢的方式加分隔符s  ")]),t._v("\nre"),s("span",{attrs:{class:"token operator"}},[t._v("=")]),s("span",{attrs:{class:"token regex"}},[t._v("/[^a-z]/i")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{attrs:{class:"token comment"}},[t._v("//前面我们说^表示字符开始,但在[]里它表示一个负字符集  ")]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v("//匹配任何不在指定范围内的任意字符,这里将匹配除字母处的所有字符  ")]),t._v("\narr "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("split")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("re"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{attrs:{class:"token comment"}},[t._v('//仍返回["a","bd","c"];  ')]),t._v("\n")])]),s("h3",{attrs:{id:"search-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#search-2","aria-hidden":"true"}},[t._v("#")]),t._v(" search")]),s("blockquote",[s("p",[t._v("找不到则返回-1")])]),s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token comment"}},[t._v("//在字符串中查找时我们常用indexOf,与之对应用于正则查找的方法是search  ")]),t._v("\nstr "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"My age is 18.Golden age!"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{attrs:{class:"token comment"}},[t._v("//年龄不是一定的,我们用indexOf不能查找它的位置  ")]),t._v("\nre "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token regex"}},[t._v("/\\d+/")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),s("span",{attrs:{class:"token function"}},[t._v("alert")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("search")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("re"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{attrs:{class:"token comment"}},[t._v("//返回查找到的字符串开始下标10  ")]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v("//注意,因为查找本身就是出现第一次就立即返回,所以无需在search时使用g标志  ")]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v("//下面的代码虽然不出错,但g标志是多余的  ")]),t._v("\nre"),s("span",{attrs:{class:"token operator"}},[t._v("=")]),s("span",{attrs:{class:"token regex"}},[t._v("/\\d+/g")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),s("span",{attrs:{class:"token function"}},[t._v("alert")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("search")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("re"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{attrs:{class:"token comment"}},[t._v("//仍然是10  ")]),t._v("\n")])]),s("h3",{attrs:{id:"match-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#match-2","aria-hidden":"true"}},[t._v("#")]),t._v(" match")]),s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"My name is CJ.Hello everyone!"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" re "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token regex"}},[t._v("/[A-Z]/")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{attrs:{class:"token comment"}},[t._v("//匹配所有大写字母  ")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("match")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("re"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{attrs:{class:"token comment"}},[t._v("//返回数组  ")]),t._v("\n"),s("span",{attrs:{class:"token function"}},[t._v("alert")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{attrs:{class:"token comment"}},[t._v("//数组中只会包含一个M,因为我们没有使用全局匹配  ")]),t._v("\nre "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token regex"}},[t._v("/[A-Z]/g")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \narr "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("match")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("re"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),s("span",{attrs:{class:"token function"}},[t._v("alert")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{attrs:{class:"token comment"}},[t._v("//M,C,J,H  ")]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v("//从字符串中抽取单词  ")]),t._v("\nre "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token regex"}},[t._v("/\\b[a-z]*\\b/gi")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{attrs:{class:"token comment"}},[t._v("//\\b表示单词边界  ")]),t._v("\nstr "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"one two three four"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),s("span",{attrs:{class:"token function"}},[t._v("alert")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("match")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("re"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{attrs:{class:"token comment"}},[t._v("//one,two,three,four  ")]),t._v("\n")])])])}],!1,null,null,null);a.default=r.exports}}]);